{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FreeTAKServer FTS is a Python3 implementation of the TAK Server for devices like CivTAK , WinTAK and ITAK, it is cross-platform. FreeTAKServer, as of Release 1.8, provides Situational Awareness and other capabilities such as: Web administration Federation Service (Connecting two or more FTS instances) Data Package upload and retrieval Image transfer and storage COT recording in a database Execution of common task list (using the ExCheck plugin for WinTAK; ATAK plugin only available to users with takmaps.com access) SSL Encryption Command Line Interface for start and stop services REST API for creation of information such as emergency, Enemy units and so on Android Edition WebMap The following features are planned: - microservices - Data Sync / mission planning Check out our roadmap @FreeTakServer#25 to see what is planned Community This project is currently in Early Production Stage . If you have any issues don't hesitate to bring it up , as FreeTAKServer is in continuous development. Donate Back the FTS team is working daily on the development of a open and free solution. We plan to do more that simply replicate the functionalities of the legacy TAK server, our road map includes integration with open source systems like LORA's Meshtastic, porting it to Android, having an open API and much more. We are doing it for free because we believe that donating personal time to a cause it's an endeavour that is worthy per-se, however, part-time, we are also spending our own money to: Maintain a Public server and a test server Investing in different technologies for R&D if you feel that FTS is useful to you and you can donate in those challenging times please consider to send you contribution here: DONATE You can also support the project by buying one of our T-Shirts NOTE: Not a big fan of Paypal, but that is the easier way I found for an initial attempt. We may go to some more ethical system in the future. Public instance We support a public instance of FTS. - download the configuration here - use the Import manager in ATAK to import the configuration Tell us what you think! To discuss with the developer team you may use: - The subreddit - The public ATAK Discord Server","title":"FreeTAKServer"},{"location":"#freetakserver","text":"FTS is a Python3 implementation of the TAK Server for devices like CivTAK , WinTAK and ITAK, it is cross-platform. FreeTAKServer, as of Release 1.8, provides Situational Awareness and other capabilities such as: Web administration Federation Service (Connecting two or more FTS instances) Data Package upload and retrieval Image transfer and storage COT recording in a database Execution of common task list (using the ExCheck plugin for WinTAK; ATAK plugin only available to users with takmaps.com access) SSL Encryption Command Line Interface for start and stop services REST API for creation of information such as emergency, Enemy units and so on Android Edition WebMap The following features are planned: - microservices - Data Sync / mission planning Check out our roadmap @FreeTakServer#25 to see what is planned","title":"FreeTAKServer"},{"location":"#community","text":"This project is currently in Early Production Stage . If you have any issues don't hesitate to bring it up , as FreeTAKServer is in continuous development.","title":"Community"},{"location":"#donate-back","text":"the FTS team is working daily on the development of a open and free solution. We plan to do more that simply replicate the functionalities of the legacy TAK server, our road map includes integration with open source systems like LORA's Meshtastic, porting it to Android, having an open API and much more. We are doing it for free because we believe that donating personal time to a cause it's an endeavour that is worthy per-se, however, part-time, we are also spending our own money to: Maintain a Public server and a test server Investing in different technologies for R&D if you feel that FTS is useful to you and you can donate in those challenging times please consider to send you contribution here: DONATE You can also support the project by buying one of our T-Shirts NOTE: Not a big fan of Paypal, but that is the easier way I found for an initial attempt. We may go to some more ethical system in the future.","title":"Donate Back"},{"location":"#public-instance","text":"We support a public instance of FTS. - download the configuration here - use the Import manager in ATAK to import the configuration","title":"Public instance"},{"location":"#tell-us-what-you-think","text":"To discuss with the developer team you may use: - The subreddit - The public ATAK Discord Server","title":"Tell us what you think!"},{"location":"API/REST_APIDoc/","text":"REST API - Public the FreeTAKServer REST API is a human readeble approach to the TAK world. The API allows you to easily connect third parties to the TAK family, without the need to understand the complexity of the COT structure or what a TCP connection is. FTS also supports an Internal API . How FTS manages the information FTS will send the information coming trough the API to all the connected clients, addtionally it will save it to the persistency, to be query in future. List of supported API In the current release (1.9), FTS supports following API: help ManageGeoObject/postGeoObject ManageGeoObject/putGeoObject ManageGeoObject/getGeoObject ManageGeoObject/getGeoObjectByZone ManageEmergency/postEmergency ManageEmergency/getEmergency ManageEmergency/deleteEmergency ManageChat/postChatToAll ManageRoute/postRoute ManagePresence/postPresence ManagePresence/putPresence ManageVideoStream/postVideoStream Sensor/postDrone Sensor/postSPI /ManageKML/postKML General Configuration To quickly test the API, you can use a browser extension like ARC Advanced rest client (Chrome). REST APIs are easy to use, however they require a minimum ammount of knowledge, we DO NOT provide support to explain WHAT an API is. Please refer to an online tutorial such as this . endpoint the API uses the following format VERB [Protocol]://IP:PORT/APIName/action for example POST http://104.58.20.216:9999/manageGeoObject/postGeoObject Authorization to use the API you need to have a REST API key. the authorization is placed in the header of the message. Authorization: Bearer [YOUR_API_KEY] you need to use the string 'Bearer' before YOUR_API_KEY a valid key is generated from FTS' CLI or, since 1.4 also from the Web UI, and stored into the DB. to add an API user in the CLI type add_api_user see CLI help for details. To create a REST API key using the Web UI, go to the User section. to consume the API you will need to request a key to your FTS admin. the following is a non-working example of a key {\u201cAuthorization\u201d: \u201cBearer meg@secre7apip@guesmeIfyouCan\u201d} Message In most end points, the message is placed in the body of the request as JSON formatted. See below for detailed examples. In the API using the Get verbs it's a variable. API Details manageAPI set of commands relative to API management getHelp retrieve API version and supported endpoints * verb: GET * endpoint: /manageAPI/getHelp * returns: json containing API version and supported endpoints Example return data (1.7) {\"APIVersion\": \"1.1\", \"SupportedEndpoints\": [\"/ManageEmergency/deleteEmergency\", \"/ManageGeoObject/postGeoObject\", \"/ManageEmergency/postEmergency\", \"/ManageGeoObject/putGeoObject\", \"/ManageGeoObject/getGeoObject\", \"/ManageEmergency/getEmergency\", \"/ManagePresence/postPresence\", \"/ManagePresence/putPresence\", \"/ManageRoute/postRoute\", \"/ManageChat/postChatToAll\", \"/DataPackageTable\", \"/ManageGeoObject\", \"/ManageEmergency\", \"/FederationTable\", \"/ManagePresence\", \"/MissionTable\", \"/ExCheckTable\", \"/SendGeoChat\", \"/ManageRoute\", \"/checkStatus\", \"/getZoneCoT\", \"/ManageChat\", \"/RecentCoT\", \"/APIUser\", \"/Clients\", \"/Alive\", \"/help\", \"/URL\"]} manageGeoObject A GeoObject is an element place on a map. It has a name, characteristics and an attitude. putGeoObject verb: PUT endpoint /ManageGeoObject/postGeoObject returns: UID Parameters GeoObject: It's the information that will determine which type will be placed on the tak maps including his icon. Please see API documentation for a list of valid entries. Since 1.7 you can also use nicknames for the geo objects. longitude: OPTIONAL the angular distance of the geoobject from the meridian of the greenwich, UK expressed in positive or negative float. (e.g -76.107.7998). remember to set the display of your TAK in decimal cohordinates, where West 77.08 is equal to '-77.08' in the API latitude: OPTIONAL the angular distance of the geoobject from the earths equator expressed in positive or negative float. (e.g 43.855682) How: the way in which this geo information has been acquired. Please see API documentation for a list of valid entries. attitude: OPTIONAL the kind of expected behavior of the GeoObject (e.g friendly, hostile, unknown). Please see API documentation for a list of valid entries. name: a string to ID the GeoObject on a map. bearing: OPTIONALsince 1.7, the direction expressed in degrees (1-360. default: 0) distance\": OPTIONAL since 1.7, the distance in meters from the Lat/long or address timeout: OPTIONAL the length, expressed in seconds until the point will stale out. Default is 300 seconds or 5 minutes. uid: REQUIRED input parameter, need to be an existing Id for this element, address: OPTIONAL address of destination if you are not sending lat/long. If sent will try to solve the exact geolocation of the destination. Possible valid examples are Big Arkansas River Park, Wichita, KS, USA Wichita, KS, USA Big Arkansas River Park, Wichita and so on Response 200 Success: uid. you have create the geoObject [MISSING PARAMETERNAME]: you have odmitted a parameter that is required server error 500: you have probably missspelled the list of parameters (e.g geoObjects/ supported attitude). the names are case sensitive (!) server error 400: you have probably an error in the format of your JSON query server error 404: you have an error in the end point definition postGeoObject verb: POST endPoint: /ManageGeoObject/postGeoObject returns: UID Parameters GeoObject: It's the information that will determine which type will be placed on the tak maps including his icon. Please see API documentation for a list of valid entries. Since 1.7 you can also use nicknames for the geo objects. longitude: OPTIONAL the angular distance of the geoobject from the meridian of the greenwich, UK expressed in positive or negative float. (e.g -76.107.7998). remember to set the display of your TAK in decimal cohordinates, where West 77.08 is equal to '-77.08' in the API latitude: OPTIONAL the angular distance of the geoobject from the earths equator expressed in positive or negative float. (e.g 43.855682) How: the way in which this geo information has been acquired. Please see API documentation for a list of valid entries. attitude: OPTIONAL the kind of expected behavior of the GeoObject (e.g friendly, hostile, unknown). Please see API documentation for a list of valid entries. name: a string to ID the GeoObject on a map. bearing: OPTIONALsince 1.7, the direction expressed in degrees (1-360. default: 0) distance\": OPTIONAL since 1.7, the distance in meters from the Lat/long or address timeout: OPTIONAL the length, expressed in seconds until the point will stale out. Default is 300 seconds or 5 minutes. uid: optional input parameter, need to be an Unique Id for this element, if not present will be server generated, if sent ATAK will try to update an existing geoObject. Use putGeoObject instead address: OPTIONAL address of destination. If sent will try to solve the exact geolocation of the destination. Possible valid examples are Big Arkansas River Park, Wichita, KS, USA Wichita, KS, USA Big Arkansas River Park, Wichita and so on Example body { \"longitude\": -77.0104, \"latitude\": 38.889, \"attitude\": \"hostile\", \"bearing\": 132, \"distance\": 1, \"geoObject\": \"Gnd Combat Infantry Sniper\", \"how\": \"nonCoT\", \"name\": \"Putin\", \"timeout\": 600 } Example body alternate { \"address\": \"Washington, DC, USA\", \"attitude\": \"hostile\", \"geoObject\": \"Gnd Combat Infantry Sniper\", \"how\": \"nonCoT\", \"name\": \"Putin\", \"timeout\": 600 } other Example body alternate { \"longitude\": -77.0104, \"latitude\": 38.889, \"distance\": 500, \"bearing\": 92, \"attitude\": \"hostile\", \"geoObject\": \"Gnd Combat Infantry Sniper\", \"how\": \"nonCoT\", \"name\": \"Putin\", \"timeout\": 600 } Example 1.7 body { \"longitude\": -77.0104, \"latitude\": 38.889, \"attitude\": \"hostile\", \"bearing\": 132, \"distance\": 1, \"geoObject\": \"Medevac\", \"how\": \"nonCoT\", \"name\": \"Medevac\", \"timeout\": 600 } Response 200 Success: uid. you have create the geoObject [MISSING PARAMETERNAME]: you have odmitted a parameter that is required server error 500: you have probably missspelled the list of parameters (e.g geoObjects/ supported attitude). the names are case sensitive (!) server error 400: you have probably an error in the format of your JSON query server error 404: you have an error in the end point definition Basic GeoObjects \"Gnd Combat Infantry Rifleman\", Nickname: \"Rifleman\" \"Gnd Combat Infantry grenadier\", Nickname: \"Grenadier\" \"Gnd Combat Infantry Mortar\" , Nickname: \"Mortar\" \"Gnd Combat Infantry MachineGunner (LMG)\", Nickname: \"LMG\" \"Gnd Combat Infantry Medic\" , Nickname: \"Medic\" \"Gnd Combat Infantry Sniper\", Nickname: \"Sniper\" \"Gnd Combat Infantry Recon\" , Nickname: \"Recon\" \"Gnd Combat Infantry anti Tank\" , Nickname: \"anti Tank\" \"Gnd Combat Infantry air defense\", Nickname: \"AA\" \"Gnd Combat Infantry Engineer\", Nickname: \"Engineer\" \"Ground\" GeoObjects Extensions for EMS Extensions since 1.7 \"Gnd Equip Vehic Civilian\", Nickname: Vehicle (OK) \"Gnd Equip Vehic Ambulance\": \"a-.-G-E-V-m\" , Nickname: Ambulance (OK) \"Gnd Structure IM Facilities Emergency Management\": \"a-.-G-I-i-e\" Nickname: Emergency Station (empty shape) \"Gnd Structure IM Facilities Law Enforcement\": \"a-.-G-I-i-l\", Nickname: Police Station (empty shape) \"Gnd Structure petroleum gas oil\": \"a-.-G-I-R-P\", Nickname: gas Station (empty shape) \"Gnd Structure Utility Electric Power\": \"a-.-G-I-U-E\", Nickname: Power Station (empty shape) Gnd Structure Utility Telecommunications\": \"a-.-G-I-U-T\", Nickname: Telco Station (empty shape) \"Gnd Structure Hospital\": \"a-.-G-I-X-H\", Nickname: Hospital (empty shape) \"Gnd IM Resources\": \"a-.-G-U-i\" Nickname: Resources (empty shape) \"FOOD DISTRIBUTION\": \"b-r-.-O-O-O\", Nickname: Food (OK, only label, need to implement nick) \"Gnd Crowd Control Team\": \"a-.-G-U-i-l-cct\" Nickname: Police (OK) \"Gnd Generators \": \"a-.-G-U-i-p-gen\" Nickname: Generator (empty shape) \"Other incident other\": \"a-.-X-i-o\" Nickname: Incident (OK, missing nick name?) \"Combat search & rescue (CSAR)\": \"a-.-A-M-F-Q-H\", Nickname: SAR (OK) \"Medevac\": \"a-.-G-U-C-V-R-E\",, Nickname: Medevac (OK) \"Alarm\": \"b-l\", Nickname: Alarm \"Alarm/Security/Law Enforcement/Civil Disturbance or Disorder\": \"b-l-l-l-cd\", Nickname: Disorder \"REFUGEES\": \"b-r-.-O-I-R\" Nickname: Refugees \"VANDALISM/RAPE/LOOT/RANSACK/PLUNDER/SACK\": \"b-r-.-O-I-V\" Nickname: Riot extensions in 1.8 Other incident geo\": \"a-.-X-i-g\", , Nickname: geo incident \"Other incident geo avalanche\": \"a-.-X-i-g-a\", Nickname: avalanche \"Other incident geo earthquake\": \"a-.-X-i-g-e\", Nickname: earthquake \"Other incident geo landslide\": \"a-.-X-i-g-l\", Nickname: landslide \"Other incident geo subsistance\": \"a-.-X-i-g-s\", Nickname: subsistance \"Other incident geo volcano\": \"a-.-X-i-g-v\", Nickname: volcano \"Other incident geo eruption\": \"a-.-X-i-g-v-e\", Nickname: eruption \"Other incident met drought\": \"a-.-X-i-m-d\", Nickname: drought \"Other incident met cyclone\": \"a-.-X-i-m-c\", Nickname: cyclone \"Other incident met tsunami\": \"a-.-X-i-m-n\", Nickname: tsunami \"Other incident fire\": \"a-.-X-i-f\", Nickname: fire \"Other incident medical public health\": \"a-.-X-i-h\", Nickname: medical incident \"Other incident transportation vehicle accident\": \"a-.-X-i-t-v-a\", Nickname: vehicle accident List of supported Attitude \"friend\" \"friendly\" \"hostile\" \"unknown\" \"pending\" \"assumed\" \"neutral\" \"suspect\" putGeoObject update an existing geoObject cohordinates (can also update other features) verb: PUT endPoint: /ManageGeoObject/putGeoObject returns: UID Parameters REQUIRED uid: optional input parameter, need to be an Unique Id for this element, if not present will be server generated, if sent ATAK will try to update an existing geoObject. Use putGeoObject instead REQUIRED GeoObject: It's the information that will determine which type will be placed on the tak maps including his icon. Please see API documentation for a list of valid entries. REQUIRED longitude: the angular distance of the geoobject from the meridian of the greenwich, UK expressed in positive or negative float. (e.g -76.107.7998). remember to set the display of your TAK in decimal cohordinates, where West 77.08 is equal to '-77.08' in the API REQUIRED latitude: the angular distance of the geoobject from the earths equator expressed in positive or negative float. (e.g 43.855682) REQUIRED attitude: the kind of expected behavior of the GeoObject (e.g friendly, hostile, unknown). Please see API documentation for a list of valid entries. How: the way in which this geo information has been acquired. Please see API documentation for a list of valid entries. name: a string to ID the GeoObject on a map. bearing: since 1.7, the direction expressed in degrees (1-360) distance\": since 1.7, the distance in meters from the Lat/long timeout:the length, expressed in seconds until the point will stale out. Default is 300 seconds or 5 minutes. Example body { \"uid\": \"44455566775623\", \"longitude\": -66.12614, \"latitude\": 43.96552, \"attitude\": \"hostile\", \"geoObject\": \"Sniper\", } #### Response * 200 with UID getGeoObject retrieve in a array all geoObjects in a given radius. It uses JSON variables, not the json body verb: GET endPoint: /ManageGeoObject/getGeoObject Parameters NOTE: these should be provided in the form of url encoded variables * radius: radius in meters where geoObjects, default(100) * longitude: longitude from which radius is calculated, default(0) * latitude: latitude from which radius is calculated, default(0) * attitude: the attitude which will be filtered, default(any). see list of supported attitude above Example Variables JSON Variables \"longitude\": -77.02385, \"latitude\": 38.999, \"attitude\": \"Hostile\" \"radius\":500 ManageChat SendGeoChatObject verb: POST endPoint: /ManageChat/postChatToAll Parameters message: the text of the GeoChat message Sender: the name of the chat's sender, changing this will also change the chat room for the client. Example body { \"message\": \"sending this over Rest API\", \"sender\": \"Admin\" } ManageEmergency postEmergency create a emergency into the server verb: POST endPoint: /ManageEmergency/postEmergency #### Parameters * Name: the name of the person that has an emergency. * EmergencyType: the type of emergency to be displayed * longitude: the angular distance of the geoobject from the meridian of the greenwich, UK expressed in positive or negative float. (e.g -76.107.7998). remember to set the display of your TAK in decimal cohordinates, where West 77.08 is equal to '-77.08' in the API * latitude: the angular distance of the geoobject from the earths equator expressed in positive or negative float. (e.g 43.855682) * uid: server generated Unique Id of this element * address: OPTIONAL address of emergency List of supported Emergency Types \"911 Alert\" \"Ring The Bell\" \"Geo-fence Breached\" \"In Contact\" Example body { \"name\": \"Corvo\", \"emergencyType\": \"In Contact\", \"longitude\": -77.01395, \"latitude\": 38.889 } getEmergency get a list of current active emergencies verb: GET endPoint: /ManageEmergency/getEmergency no parameter required Example response { \"json_list\": [ { \"PrimaryKey\": 1, \"event_id\": \"459b5874-1ebf-11eb-9e70-4e58de281c19\" } ] } deleteEmergency delete an active emergency. (TODO: delete of emergencies can be only done by the originator of it.) verb: DELETE endPoint: /ManageEmergency/deleteEmergency Parameters uid: server generated Unique Id of this emergency status: if the emergency is currently active or not (on/off) Example body { \"uid\": \"459b5874-1ebf-11eb-9e70-4e58de281c19\", \"status\": \"off\" } ManagePresence Manage a team member position postPresence verb: POST endPoint: /ManagePresence/postPresence returns: UID Parameters longitude: the angular distance of the geoobject from the meridian of the greenwich, UK expressed in positive or negative float. (e.g -76.107.7998). remember to set the display of your TAK in decimal cohordinates, where West 77.08 is equal to '-77.08' in the API latitude: the angular distance of the geoobject from the earths equator expressed in positive or negative float. (e.g 43.855682) How: the way in which this geo information has been acquired. Please see API documentation for a list of valid entries. role: the given role within the team . Please see API documentation for a list of valid entries. name: a string to ID the GeoObject on a map. team: the color of the team uid: optional Unique Id of this element. if present will update an existing element. use the put insted *V. 1.7 only If you send the UID an existing CLI will be updated# Example body { \"uid\": \"999b5874-1ebf-11zz-9e70-4e58de281c19\", \"how\": \"nonCoT\", \"name\": \"POTUS\", \"longitude\": -77.01385, \"latitude\": 38.889, \"role\": \"Team Member\", \"team\": \"Yellow\" } putPresence Updates the location of a team member * verb: PUT * endPoint: /ManagePresence/putPresence * returns: UID #### Parameters * uid: server generated Unique Id of this emergency ManageRoute manage routes on the map postRoute verb: POST endpoint: /ManageRoute/postRoute returns: uid parameters timeout: OPTIONAL the length, expressed in seconds until the point will stale out. Default is 300 seconds or 5 minutes. address: OPTIONAL address of destination. If sent will try to solve the exact geolocation of the destination. Possible valid examples are Big Arkansas River Park, Wichita, KS, USA Wichita, KS, USA Big Arkansas River Park, Wichita and so on method: OPTIONAL the method we plan to use for the route (Driving, Flying, Walking, Swimming, Watercraft). currently not used and set to Driving in the client longitudeDest: OPTIONAL if address is not sent latitudeDest: OPTIONAL if address is not sent uid: OPTIONAL server generated Unique Id of this element. it will update the existing element. routeName:OPTIONAL the name of the route endName: OPTIONAL the name of the destination (end point on the route) startName: OPTIONAL the name of the start (start point of the route) uid: OPTIONALserver generated Unique Id of this element. it will update an existing route. longitude: the angular distance of the geoobject from the meridian of the greenwich, UK expressed in positive or negative float. (e.g -76.107.7998). remember to set the display of your TAK in decimal cohordinates, where West 77.08 is equal to '-77.08' in the API latitude: the angular distance of the geoobject from the earths equator expressed in positive or negative float. (e.g 43.855682) Example body { \"longitude\": -77.02385, \"latitude\": 38.999, \"routeName\": \"trip to Phil\", \"startName\": \"Washington\", \"endName\": \"Philadelphia\", \"timeout\": 40000, \"latitudeDest\": 39.940, \"longitudeDest\": -75.01385 } Example body 2 { \"longitude\": -77.01385, \"latitude\": 38.889, \"routeName\": \"trip to wichita\", \"timeout\": 40000, \"address\": \"Wichita, KS, USA\" } Example body 3 { \"longitude\": -77.02385, \"latitude\": 38.999, \"routeName\": \"trip to halifax\", \"latitudeDest\": 44.69, \"longitudeDest\": -63.57, \"method\": \"Flying\" } ManageVideoStream manage creation of videos endpoints in the clients. the videos are visible under 'Video Player' postVideoStream verb: POST endpoint: /ManageVideoStream/postVideoStream returns: uid parameters streamAddress: the IP of the video server \"streamPort\": the port the video server respond to \"streamPath\": the unique path of the video stream \"alias\": a name for the stream \"streamProtocol\": the type of protocol used (e.g. rtsp, rtmp, raw) Example body { \"streamAddress\": \"64.227.70.77\", \"streamPort\": \"1935\", \"streamPath\": \"/LiveApp/342508189321134315564775\", \"alias\": \"Demo Stream From Drone \", \"streamProtocol\": \"rtmp\" } Example body 2 ``` streamPort and streamPort params still required bu will be ignored { \"streamAddress\": \"rtsp://64.227.70.77:1935/LiveApp/342508189321134315564775\", \"alias\": \"raw Stream From Drone \", \"streamPort\": \"1935\", \"streamPath\": \"/LiveApp/342508189321134315564775\", \"streamProtocol\": \"raw\" } #### getVideoStream retrieve list of stream paths * verb: GET * endpoint: /ManageVideoStream/getVideoStream * returns: json with path #### example return ``` json { \"video_stream\": [\"/LiveApp/342508189321134315564775\", \"/test/other\"] } Sensor since 1.9 manage sensors (name to be changed in ManageSensor) postDrone create a drone object with a field of view, a current aiming point a video stream * verb: POST * endpoint: /Sensor/postDrone * returns: DRONE_UID, SPI_UID parameters timeout: OPTIONAL the length, expressed in seconds until the point will stale out. Default is 300 seconds or 5 minutes. Name: the name of the drone, will become also the name of the video stream. Range: the range of view of the sensor in meters Bearing: the direction in which the sensor is aimed in degrees FieldOfView: the field of view of the drone in degrees VideoURLUID: the address of the video stream. DJI drones only support RTMP protocol. YOu need to have FreeTAHub Video service active to see a stream. longitude: the angular distance of the geoobject from the meridian of the greenwich, UK expressed in positive or negative float. (e.g -76.107.7998). remember to set the display of your TAK in decimal cohordinates, where West 77.08 is equal to '-77.08' in the API latitude: the angular distance of the geoobject from the earths equator expressed in positive or negative float. (e.g 43.855682) uid: OPTIONAL input parameter, needed to update existing drone COT SPIName: the name of the Sensor Point of Interest the UAS is currently aiming to. currently will NOT work in a update message (when you send the UID) SPILongitude: longitude of target. currently will NOT work in a update message (when you send the UID) SPILatitude: latitude of target. currently will NOT work in a update message (when you send the UID) Example body creation { \"name\":\"Putin air\", \"Bearing\": \"90\", \"longitude\": -77.01383, \"latitude\": 38.883, \"FieldOfView\":\"20\", \"Range\":\"500\", \"VideoURLUID\":\"rtmp://64.227.50.48:1935/live/PutinAirVideo\", \"SPILongitude\": -77.01393, \"SPILatitude\": 38.885, \"SPIName\": \"Putin air SPI\" } ``` ##### Example body: updateexisting drone ``` { \"uid\":\"d033fd0c-d5ac-11eb-ab27-4e58de281c19\", \"name\":\"Putin air\", \"timeout\": 40000, \"Bearing\": \"0\", \"longitude\": -77.01399, \"latitude\": 38.889, \"FieldOfView\":\"20\", \"Range\":\"500\", \"VideoURLUID\":\"rtmp://64.227.50.49:1935/live/PutinAirVideo\" } ``` #### postSPI create an SPI at a point or update an existing SPI. If the video source is a UAV, and the UAV is also publishing its own position and sensor point of interest (SPI), those will be plotted on the map. Being able to see the position of the aircraft and know where on the map the camera is looking in real time, while being able to see the video on the same screen, is a huge boost to SA. * verb: POST * endpoint: /Sensor/postSPI * returns: uid #### parameters * timeout: OPTIONAL the length, expressed in seconds until the point will stale out. Default is 300 seconds or 5 minutes. * uid: OPTIONAL input parameter, needed to update existing SPI, * longitude: the angular distance of the geoobject from the meridian of the greenwich, UK expressed in positive or negative float. (e.g -76.107.7998). remember to set the display of your TAK in decimal cohordinates, where *West 77.08* is equal to '-77.08' in the API * latitude: the angular distance of the geoobject from the earths equator expressed in positive or negative float. (e.g 43.855682) * droneUid: the uid of the connected drone * name: the name of the drone, will become also the name of the video stream. #### Example Body { \"uid\": \"e452b6bf-d4f0-11eb-b818-2cf05d092d98\", \"timeout\": 500, \"longitude\": 4, \"latitude\": 8, \"droneUid\": \"d76f608a-d4f0-11eb-b375-2cf05d092d98\", \"name\": \"test\" } ## ManageKML allow to post a set of geo information with attached metadata in tabular format ![image](https://user-images.githubusercontent.com/60719165/125200108-d5a35400-e23f-11eb-934e-fc04210820c4.png) #### postKML * verb: POST * endpoint: /ManageKML/postKML * returns: \"successful\" or HTTP error #### parameters * name: the name of the report * longitude: the angular distance of the geoobject from the meridian of the greenwich, UK expressed in positive or negative float. (e.g -76.107.7998). remember to set the display of your TAK in decimal cohordinates, where *West 77.08* is equal to '-77.08' in the API * latitude: the angular distance of the geoobject from the earths equator expressed in positive or negative float. (e.g 43.855682) * body: an JSON structure of key pairs (name, value) #### Example Body { \"name\": \"Putin Report\", \"longitude\": -77.01399, \"latitude\": 38.889, \"body\" :{ \"userCallsign\": \"Mr Putin\", \"dateTime\": \"2021-07-13\", \"type\": \"Surveillance\", \"eventScale\": \"Capital\", \"importance\": \"Routine\", \"status\": \"FurtherInvestigation\", \"Time Observed\": \"2021-05-13T13:55:05.19Z\", \"Duration of Event\": \"All day\", \"Method Of Detection\": \"General Observation\", \"Surveillance Type\": \"Discreet\", \"Assessed Threats\":\"Threat to Mission\", \"Final Remarks\": \"SNAFU\" } } ```","title":"REST API - Public"},{"location":"API/REST_APIDoc/#rest-api-public","text":"the FreeTAKServer REST API is a human readeble approach to the TAK world. The API allows you to easily connect third parties to the TAK family, without the need to understand the complexity of the COT structure or what a TCP connection is. FTS also supports an Internal API .","title":"REST API - Public"},{"location":"API/REST_APIDoc/#how-fts-manages-the-information","text":"FTS will send the information coming trough the API to all the connected clients, addtionally it will save it to the persistency, to be query in future.","title":"How FTS manages the information"},{"location":"API/REST_APIDoc/#list-of-supported-api","text":"In the current release (1.9), FTS supports following API: help ManageGeoObject/postGeoObject ManageGeoObject/putGeoObject ManageGeoObject/getGeoObject ManageGeoObject/getGeoObjectByZone ManageEmergency/postEmergency ManageEmergency/getEmergency ManageEmergency/deleteEmergency ManageChat/postChatToAll ManageRoute/postRoute ManagePresence/postPresence ManagePresence/putPresence ManageVideoStream/postVideoStream Sensor/postDrone Sensor/postSPI /ManageKML/postKML","title":"List of supported API"},{"location":"API/REST_APIDoc/#general-configuration","text":"To quickly test the API, you can use a browser extension like ARC Advanced rest client (Chrome). REST APIs are easy to use, however they require a minimum ammount of knowledge, we DO NOT provide support to explain WHAT an API is. Please refer to an online tutorial such as this .","title":"General Configuration"},{"location":"API/REST_APIDoc/#endpoint","text":"the API uses the following format VERB [Protocol]://IP:PORT/APIName/action for example POST http://104.58.20.216:9999/manageGeoObject/postGeoObject","title":"endpoint"},{"location":"API/REST_APIDoc/#authorization","text":"to use the API you need to have a REST API key. the authorization is placed in the header of the message. Authorization: Bearer [YOUR_API_KEY] you need to use the string 'Bearer' before YOUR_API_KEY a valid key is generated from FTS' CLI or, since 1.4 also from the Web UI, and stored into the DB. to add an API user in the CLI type add_api_user see CLI help for details. To create a REST API key using the Web UI, go to the User section. to consume the API you will need to request a key to your FTS admin. the following is a non-working example of a key {\u201cAuthorization\u201d: \u201cBearer meg@secre7apip@guesmeIfyouCan\u201d}","title":"Authorization"},{"location":"API/REST_APIDoc/#message","text":"In most end points, the message is placed in the body of the request as JSON formatted. See below for detailed examples. In the API using the Get verbs it's a variable.","title":"Message"},{"location":"API/REST_APIDoc/#api-details","text":"","title":"API Details"},{"location":"API/REST_APIDoc/#manageapi","text":"set of commands relative to API management","title":"manageAPI"},{"location":"API/REST_APIDoc/#gethelp","text":"retrieve API version and supported endpoints * verb: GET * endpoint: /manageAPI/getHelp * returns: json containing API version and supported endpoints","title":"getHelp"},{"location":"API/REST_APIDoc/#example-return-data-17","text":"{\"APIVersion\": \"1.1\", \"SupportedEndpoints\": [\"/ManageEmergency/deleteEmergency\", \"/ManageGeoObject/postGeoObject\", \"/ManageEmergency/postEmergency\", \"/ManageGeoObject/putGeoObject\", \"/ManageGeoObject/getGeoObject\", \"/ManageEmergency/getEmergency\", \"/ManagePresence/postPresence\", \"/ManagePresence/putPresence\", \"/ManageRoute/postRoute\", \"/ManageChat/postChatToAll\", \"/DataPackageTable\", \"/ManageGeoObject\", \"/ManageEmergency\", \"/FederationTable\", \"/ManagePresence\", \"/MissionTable\", \"/ExCheckTable\", \"/SendGeoChat\", \"/ManageRoute\", \"/checkStatus\", \"/getZoneCoT\", \"/ManageChat\", \"/RecentCoT\", \"/APIUser\", \"/Clients\", \"/Alive\", \"/help\", \"/URL\"]}","title":"Example  return data (1.7)"},{"location":"API/REST_APIDoc/#managegeoobject","text":"A GeoObject is an element place on a map. It has a name, characteristics and an attitude.","title":"manageGeoObject"},{"location":"API/REST_APIDoc/#putgeoobject","text":"verb: PUT endpoint /ManageGeoObject/postGeoObject returns: UID","title":"putGeoObject"},{"location":"API/REST_APIDoc/#parameters","text":"GeoObject: It's the information that will determine which type will be placed on the tak maps including his icon. Please see API documentation for a list of valid entries. Since 1.7 you can also use nicknames for the geo objects. longitude: OPTIONAL the angular distance of the geoobject from the meridian of the greenwich, UK expressed in positive or negative float. (e.g -76.107.7998). remember to set the display of your TAK in decimal cohordinates, where West 77.08 is equal to '-77.08' in the API latitude: OPTIONAL the angular distance of the geoobject from the earths equator expressed in positive or negative float. (e.g 43.855682) How: the way in which this geo information has been acquired. Please see API documentation for a list of valid entries. attitude: OPTIONAL the kind of expected behavior of the GeoObject (e.g friendly, hostile, unknown). Please see API documentation for a list of valid entries. name: a string to ID the GeoObject on a map. bearing: OPTIONALsince 1.7, the direction expressed in degrees (1-360. default: 0) distance\": OPTIONAL since 1.7, the distance in meters from the Lat/long or address timeout: OPTIONAL the length, expressed in seconds until the point will stale out. Default is 300 seconds or 5 minutes. uid: REQUIRED input parameter, need to be an existing Id for this element, address: OPTIONAL address of destination if you are not sending lat/long. If sent will try to solve the exact geolocation of the destination. Possible valid examples are Big Arkansas River Park, Wichita, KS, USA Wichita, KS, USA Big Arkansas River Park, Wichita and so on","title":"Parameters"},{"location":"API/REST_APIDoc/#response","text":"200 Success: uid. you have create the geoObject [MISSING PARAMETERNAME]: you have odmitted a parameter that is required server error 500: you have probably missspelled the list of parameters (e.g geoObjects/ supported attitude). the names are case sensitive (!) server error 400: you have probably an error in the format of your JSON query server error 404: you have an error in the end point definition","title":"Response"},{"location":"API/REST_APIDoc/#postgeoobject","text":"verb: POST endPoint: /ManageGeoObject/postGeoObject returns: UID","title":"postGeoObject"},{"location":"API/REST_APIDoc/#parameters_1","text":"GeoObject: It's the information that will determine which type will be placed on the tak maps including his icon. Please see API documentation for a list of valid entries. Since 1.7 you can also use nicknames for the geo objects. longitude: OPTIONAL the angular distance of the geoobject from the meridian of the greenwich, UK expressed in positive or negative float. (e.g -76.107.7998). remember to set the display of your TAK in decimal cohordinates, where West 77.08 is equal to '-77.08' in the API latitude: OPTIONAL the angular distance of the geoobject from the earths equator expressed in positive or negative float. (e.g 43.855682) How: the way in which this geo information has been acquired. Please see API documentation for a list of valid entries. attitude: OPTIONAL the kind of expected behavior of the GeoObject (e.g friendly, hostile, unknown). Please see API documentation for a list of valid entries. name: a string to ID the GeoObject on a map. bearing: OPTIONALsince 1.7, the direction expressed in degrees (1-360. default: 0) distance\": OPTIONAL since 1.7, the distance in meters from the Lat/long or address timeout: OPTIONAL the length, expressed in seconds until the point will stale out. Default is 300 seconds or 5 minutes. uid: optional input parameter, need to be an Unique Id for this element, if not present will be server generated, if sent ATAK will try to update an existing geoObject. Use putGeoObject instead address: OPTIONAL address of destination. If sent will try to solve the exact geolocation of the destination. Possible valid examples are Big Arkansas River Park, Wichita, KS, USA Wichita, KS, USA Big Arkansas River Park, Wichita and so on","title":"Parameters"},{"location":"API/REST_APIDoc/#example-body","text":"{ \"longitude\": -77.0104, \"latitude\": 38.889, \"attitude\": \"hostile\", \"bearing\": 132, \"distance\": 1, \"geoObject\": \"Gnd Combat Infantry Sniper\", \"how\": \"nonCoT\", \"name\": \"Putin\", \"timeout\": 600 }","title":"Example body"},{"location":"API/REST_APIDoc/#example-body-alternate","text":"{ \"address\": \"Washington, DC, USA\", \"attitude\": \"hostile\", \"geoObject\": \"Gnd Combat Infantry Sniper\", \"how\": \"nonCoT\", \"name\": \"Putin\", \"timeout\": 600 }","title":"Example body alternate"},{"location":"API/REST_APIDoc/#other-example-body-alternate","text":"{ \"longitude\": -77.0104, \"latitude\": 38.889, \"distance\": 500, \"bearing\": 92, \"attitude\": \"hostile\", \"geoObject\": \"Gnd Combat Infantry Sniper\", \"how\": \"nonCoT\", \"name\": \"Putin\", \"timeout\": 600 }","title":"other Example body alternate"},{"location":"API/REST_APIDoc/#example-17-body","text":"{ \"longitude\": -77.0104, \"latitude\": 38.889, \"attitude\": \"hostile\", \"bearing\": 132, \"distance\": 1, \"geoObject\": \"Medevac\", \"how\": \"nonCoT\", \"name\": \"Medevac\", \"timeout\": 600 }","title":"Example 1.7 body"},{"location":"API/REST_APIDoc/#response_1","text":"200 Success: uid. you have create the geoObject [MISSING PARAMETERNAME]: you have odmitted a parameter that is required server error 500: you have probably missspelled the list of parameters (e.g geoObjects/ supported attitude). the names are case sensitive (!) server error 400: you have probably an error in the format of your JSON query server error 404: you have an error in the end point definition","title":"Response"},{"location":"API/REST_APIDoc/#basic-geoobjects","text":"\"Gnd Combat Infantry Rifleman\", Nickname: \"Rifleman\" \"Gnd Combat Infantry grenadier\", Nickname: \"Grenadier\" \"Gnd Combat Infantry Mortar\" , Nickname: \"Mortar\" \"Gnd Combat Infantry MachineGunner (LMG)\", Nickname: \"LMG\" \"Gnd Combat Infantry Medic\" , Nickname: \"Medic\" \"Gnd Combat Infantry Sniper\", Nickname: \"Sniper\" \"Gnd Combat Infantry Recon\" , Nickname: \"Recon\" \"Gnd Combat Infantry anti Tank\" , Nickname: \"anti Tank\" \"Gnd Combat Infantry air defense\", Nickname: \"AA\" \"Gnd Combat Infantry Engineer\", Nickname: \"Engineer\" \"Ground\"","title":"Basic GeoObjects"},{"location":"API/REST_APIDoc/#geoobjects-extensions-for-ems","text":"Extensions since 1.7 \"Gnd Equip Vehic Civilian\", Nickname: Vehicle (OK) \"Gnd Equip Vehic Ambulance\": \"a-.-G-E-V-m\" , Nickname: Ambulance (OK) \"Gnd Structure IM Facilities Emergency Management\": \"a-.-G-I-i-e\" Nickname: Emergency Station (empty shape) \"Gnd Structure IM Facilities Law Enforcement\": \"a-.-G-I-i-l\", Nickname: Police Station (empty shape) \"Gnd Structure petroleum gas oil\": \"a-.-G-I-R-P\", Nickname: gas Station (empty shape) \"Gnd Structure Utility Electric Power\": \"a-.-G-I-U-E\", Nickname: Power Station (empty shape) Gnd Structure Utility Telecommunications\": \"a-.-G-I-U-T\", Nickname: Telco Station (empty shape) \"Gnd Structure Hospital\": \"a-.-G-I-X-H\", Nickname: Hospital (empty shape) \"Gnd IM Resources\": \"a-.-G-U-i\" Nickname: Resources (empty shape) \"FOOD DISTRIBUTION\": \"b-r-.-O-O-O\", Nickname: Food (OK, only label, need to implement nick) \"Gnd Crowd Control Team\": \"a-.-G-U-i-l-cct\" Nickname: Police (OK) \"Gnd Generators \": \"a-.-G-U-i-p-gen\" Nickname: Generator (empty shape) \"Other incident other\": \"a-.-X-i-o\" Nickname: Incident (OK, missing nick name?) \"Combat search & rescue (CSAR)\": \"a-.-A-M-F-Q-H\", Nickname: SAR (OK) \"Medevac\": \"a-.-G-U-C-V-R-E\",, Nickname: Medevac (OK) \"Alarm\": \"b-l\", Nickname: Alarm \"Alarm/Security/Law Enforcement/Civil Disturbance or Disorder\": \"b-l-l-l-cd\", Nickname: Disorder \"REFUGEES\": \"b-r-.-O-I-R\" Nickname: Refugees \"VANDALISM/RAPE/LOOT/RANSACK/PLUNDER/SACK\": \"b-r-.-O-I-V\" Nickname: Riot extensions in 1.8 Other incident geo\": \"a-.-X-i-g\", , Nickname: geo incident \"Other incident geo avalanche\": \"a-.-X-i-g-a\", Nickname: avalanche \"Other incident geo earthquake\": \"a-.-X-i-g-e\", Nickname: earthquake \"Other incident geo landslide\": \"a-.-X-i-g-l\", Nickname: landslide \"Other incident geo subsistance\": \"a-.-X-i-g-s\", Nickname: subsistance \"Other incident geo volcano\": \"a-.-X-i-g-v\", Nickname: volcano \"Other incident geo eruption\": \"a-.-X-i-g-v-e\", Nickname: eruption \"Other incident met drought\": \"a-.-X-i-m-d\", Nickname: drought \"Other incident met cyclone\": \"a-.-X-i-m-c\", Nickname: cyclone \"Other incident met tsunami\": \"a-.-X-i-m-n\", Nickname: tsunami \"Other incident fire\": \"a-.-X-i-f\", Nickname: fire \"Other incident medical public health\": \"a-.-X-i-h\", Nickname: medical incident \"Other incident transportation vehicle accident\": \"a-.-X-i-t-v-a\", Nickname: vehicle accident","title":"GeoObjects Extensions for EMS"},{"location":"API/REST_APIDoc/#list-of-supported-attitude","text":"\"friend\" \"friendly\" \"hostile\" \"unknown\" \"pending\" \"assumed\" \"neutral\" \"suspect\"","title":"List of supported Attitude"},{"location":"API/REST_APIDoc/#putgeoobject_1","text":"update an existing geoObject cohordinates (can also update other features) verb: PUT endPoint: /ManageGeoObject/putGeoObject returns: UID","title":"putGeoObject"},{"location":"API/REST_APIDoc/#parameters_2","text":"REQUIRED uid: optional input parameter, need to be an Unique Id for this element, if not present will be server generated, if sent ATAK will try to update an existing geoObject. Use putGeoObject instead REQUIRED GeoObject: It's the information that will determine which type will be placed on the tak maps including his icon. Please see API documentation for a list of valid entries. REQUIRED longitude: the angular distance of the geoobject from the meridian of the greenwich, UK expressed in positive or negative float. (e.g -76.107.7998). remember to set the display of your TAK in decimal cohordinates, where West 77.08 is equal to '-77.08' in the API REQUIRED latitude: the angular distance of the geoobject from the earths equator expressed in positive or negative float. (e.g 43.855682) REQUIRED attitude: the kind of expected behavior of the GeoObject (e.g friendly, hostile, unknown). Please see API documentation for a list of valid entries. How: the way in which this geo information has been acquired. Please see API documentation for a list of valid entries. name: a string to ID the GeoObject on a map. bearing: since 1.7, the direction expressed in degrees (1-360) distance\": since 1.7, the distance in meters from the Lat/long timeout:the length, expressed in seconds until the point will stale out. Default is 300 seconds or 5 minutes.","title":"Parameters"},{"location":"API/REST_APIDoc/#example-body_1","text":"{ \"uid\": \"44455566775623\", \"longitude\": -66.12614, \"latitude\": 43.96552, \"attitude\": \"hostile\", \"geoObject\": \"Sniper\", } #### Response * 200 with UID","title":"Example body"},{"location":"API/REST_APIDoc/#getgeoobject","text":"retrieve in a array all geoObjects in a given radius. It uses JSON variables, not the json body verb: GET endPoint: /ManageGeoObject/getGeoObject","title":"getGeoObject"},{"location":"API/REST_APIDoc/#parameters_3","text":"NOTE: these should be provided in the form of url encoded variables * radius: radius in meters where geoObjects, default(100) * longitude: longitude from which radius is calculated, default(0) * latitude: latitude from which radius is calculated, default(0) * attitude: the attitude which will be filtered, default(any). see list of supported attitude above","title":"Parameters"},{"location":"API/REST_APIDoc/#example-variables","text":"JSON Variables \"longitude\": -77.02385, \"latitude\": 38.999, \"attitude\": \"Hostile\" \"radius\":500","title":"Example Variables"},{"location":"API/REST_APIDoc/#managechat","text":"","title":"ManageChat"},{"location":"API/REST_APIDoc/#sendgeochatobject","text":"verb: POST endPoint: /ManageChat/postChatToAll","title":"SendGeoChatObject"},{"location":"API/REST_APIDoc/#parameters_4","text":"message: the text of the GeoChat message Sender: the name of the chat's sender, changing this will also change the chat room for the client.","title":"Parameters"},{"location":"API/REST_APIDoc/#example-body_2","text":"{ \"message\": \"sending this over Rest API\", \"sender\": \"Admin\" }","title":"Example body"},{"location":"API/REST_APIDoc/#manageemergency","text":"","title":"ManageEmergency"},{"location":"API/REST_APIDoc/#postemergency","text":"create a emergency into the server verb: POST endPoint: /ManageEmergency/postEmergency #### Parameters * Name: the name of the person that has an emergency. * EmergencyType: the type of emergency to be displayed * longitude: the angular distance of the geoobject from the meridian of the greenwich, UK expressed in positive or negative float. (e.g -76.107.7998). remember to set the display of your TAK in decimal cohordinates, where West 77.08 is equal to '-77.08' in the API * latitude: the angular distance of the geoobject from the earths equator expressed in positive or negative float. (e.g 43.855682) * uid: server generated Unique Id of this element * address: OPTIONAL address of emergency","title":"postEmergency"},{"location":"API/REST_APIDoc/#list-of-supported-emergency-types","text":"\"911 Alert\" \"Ring The Bell\" \"Geo-fence Breached\" \"In Contact\"","title":"List of supported Emergency Types"},{"location":"API/REST_APIDoc/#example-body_3","text":"{ \"name\": \"Corvo\", \"emergencyType\": \"In Contact\", \"longitude\": -77.01395, \"latitude\": 38.889 }","title":"Example body"},{"location":"API/REST_APIDoc/#getemergency","text":"get a list of current active emergencies verb: GET endPoint: /ManageEmergency/getEmergency no parameter required","title":"getEmergency"},{"location":"API/REST_APIDoc/#example-response","text":"{ \"json_list\": [ { \"PrimaryKey\": 1, \"event_id\": \"459b5874-1ebf-11eb-9e70-4e58de281c19\" } ] }","title":"Example  response"},{"location":"API/REST_APIDoc/#deleteemergency","text":"delete an active emergency. (TODO: delete of emergencies can be only done by the originator of it.) verb: DELETE endPoint: /ManageEmergency/deleteEmergency","title":"deleteEmergency"},{"location":"API/REST_APIDoc/#parameters_5","text":"uid: server generated Unique Id of this emergency status: if the emergency is currently active or not (on/off)","title":"Parameters"},{"location":"API/REST_APIDoc/#example-body_4","text":"{ \"uid\": \"459b5874-1ebf-11eb-9e70-4e58de281c19\", \"status\": \"off\" }","title":"Example body"},{"location":"API/REST_APIDoc/#managepresence","text":"Manage a team member position","title":"ManagePresence"},{"location":"API/REST_APIDoc/#postpresence","text":"verb: POST endPoint: /ManagePresence/postPresence returns: UID","title":"postPresence"},{"location":"API/REST_APIDoc/#parameters_6","text":"longitude: the angular distance of the geoobject from the meridian of the greenwich, UK expressed in positive or negative float. (e.g -76.107.7998). remember to set the display of your TAK in decimal cohordinates, where West 77.08 is equal to '-77.08' in the API latitude: the angular distance of the geoobject from the earths equator expressed in positive or negative float. (e.g 43.855682) How: the way in which this geo information has been acquired. Please see API documentation for a list of valid entries. role: the given role within the team . Please see API documentation for a list of valid entries. name: a string to ID the GeoObject on a map. team: the color of the team uid: optional Unique Id of this element. if present will update an existing element. use the put insted *V. 1.7 only If you send the UID an existing CLI will be updated#","title":"Parameters"},{"location":"API/REST_APIDoc/#example-body_5","text":"{ \"uid\": \"999b5874-1ebf-11zz-9e70-4e58de281c19\", \"how\": \"nonCoT\", \"name\": \"POTUS\", \"longitude\": -77.01385, \"latitude\": 38.889, \"role\": \"Team Member\", \"team\": \"Yellow\" }","title":"Example body"},{"location":"API/REST_APIDoc/#putpresence","text":"Updates the location of a team member * verb: PUT * endPoint: /ManagePresence/putPresence * returns: UID #### Parameters * uid: server generated Unique Id of this emergency","title":"putPresence"},{"location":"API/REST_APIDoc/#manageroute","text":"manage routes on the map","title":"ManageRoute"},{"location":"API/REST_APIDoc/#postroute","text":"verb: POST endpoint: /ManageRoute/postRoute returns: uid","title":"postRoute"},{"location":"API/REST_APIDoc/#parameters_7","text":"timeout: OPTIONAL the length, expressed in seconds until the point will stale out. Default is 300 seconds or 5 minutes. address: OPTIONAL address of destination. If sent will try to solve the exact geolocation of the destination. Possible valid examples are Big Arkansas River Park, Wichita, KS, USA Wichita, KS, USA Big Arkansas River Park, Wichita and so on method: OPTIONAL the method we plan to use for the route (Driving, Flying, Walking, Swimming, Watercraft). currently not used and set to Driving in the client longitudeDest: OPTIONAL if address is not sent latitudeDest: OPTIONAL if address is not sent uid: OPTIONAL server generated Unique Id of this element. it will update the existing element. routeName:OPTIONAL the name of the route endName: OPTIONAL the name of the destination (end point on the route) startName: OPTIONAL the name of the start (start point of the route) uid: OPTIONALserver generated Unique Id of this element. it will update an existing route. longitude: the angular distance of the geoobject from the meridian of the greenwich, UK expressed in positive or negative float. (e.g -76.107.7998). remember to set the display of your TAK in decimal cohordinates, where West 77.08 is equal to '-77.08' in the API latitude: the angular distance of the geoobject from the earths equator expressed in positive or negative float. (e.g 43.855682)","title":"parameters"},{"location":"API/REST_APIDoc/#example-body_6","text":"{ \"longitude\": -77.02385, \"latitude\": 38.999, \"routeName\": \"trip to Phil\", \"startName\": \"Washington\", \"endName\": \"Philadelphia\", \"timeout\": 40000, \"latitudeDest\": 39.940, \"longitudeDest\": -75.01385 }","title":"Example body"},{"location":"API/REST_APIDoc/#example-body-2","text":"{ \"longitude\": -77.01385, \"latitude\": 38.889, \"routeName\": \"trip to wichita\", \"timeout\": 40000, \"address\": \"Wichita, KS, USA\" }","title":"Example body 2"},{"location":"API/REST_APIDoc/#example-body-3","text":"{ \"longitude\": -77.02385, \"latitude\": 38.999, \"routeName\": \"trip to halifax\", \"latitudeDest\": 44.69, \"longitudeDest\": -63.57, \"method\": \"Flying\" }","title":"Example body 3"},{"location":"API/REST_APIDoc/#managevideostream","text":"manage creation of videos endpoints in the clients. the videos are visible under 'Video Player'","title":"ManageVideoStream"},{"location":"API/REST_APIDoc/#postvideostream","text":"verb: POST endpoint: /ManageVideoStream/postVideoStream returns: uid","title":"postVideoStream"},{"location":"API/REST_APIDoc/#parameters_8","text":"streamAddress: the IP of the video server \"streamPort\": the port the video server respond to \"streamPath\": the unique path of the video stream \"alias\": a name for the stream \"streamProtocol\": the type of protocol used (e.g. rtsp, rtmp, raw)","title":"parameters"},{"location":"API/REST_APIDoc/#example-body_7","text":"{ \"streamAddress\": \"64.227.70.77\", \"streamPort\": \"1935\", \"streamPath\": \"/LiveApp/342508189321134315564775\", \"alias\": \"Demo Stream From Drone \", \"streamProtocol\": \"rtmp\" }","title":"Example body"},{"location":"API/REST_APIDoc/#example-body-2_1","text":"``` streamPort and streamPort params still required bu will be ignored { \"streamAddress\": \"rtsp://64.227.70.77:1935/LiveApp/342508189321134315564775\", \"alias\": \"raw Stream From Drone \", \"streamPort\": \"1935\", \"streamPath\": \"/LiveApp/342508189321134315564775\", \"streamProtocol\": \"raw\" } #### getVideoStream retrieve list of stream paths * verb: GET * endpoint: /ManageVideoStream/getVideoStream * returns: json with path #### example return ``` json { \"video_stream\": [\"/LiveApp/342508189321134315564775\", \"/test/other\"] }","title":"Example body 2"},{"location":"API/REST_APIDoc/#sensor","text":"since 1.9 manage sensors (name to be changed in ManageSensor)","title":"Sensor"},{"location":"API/REST_APIDoc/#postdrone","text":"create a drone object with a field of view, a current aiming point a video stream * verb: POST * endpoint: /Sensor/postDrone * returns: DRONE_UID, SPI_UID","title":"postDrone"},{"location":"API/REST_APIDoc/#parameters_9","text":"timeout: OPTIONAL the length, expressed in seconds until the point will stale out. Default is 300 seconds or 5 minutes. Name: the name of the drone, will become also the name of the video stream. Range: the range of view of the sensor in meters Bearing: the direction in which the sensor is aimed in degrees FieldOfView: the field of view of the drone in degrees VideoURLUID: the address of the video stream. DJI drones only support RTMP protocol. YOu need to have FreeTAHub Video service active to see a stream. longitude: the angular distance of the geoobject from the meridian of the greenwich, UK expressed in positive or negative float. (e.g -76.107.7998). remember to set the display of your TAK in decimal cohordinates, where West 77.08 is equal to '-77.08' in the API latitude: the angular distance of the geoobject from the earths equator expressed in positive or negative float. (e.g 43.855682) uid: OPTIONAL input parameter, needed to update existing drone COT SPIName: the name of the Sensor Point of Interest the UAS is currently aiming to. currently will NOT work in a update message (when you send the UID) SPILongitude: longitude of target. currently will NOT work in a update message (when you send the UID) SPILatitude: latitude of target. currently will NOT work in a update message (when you send the UID)","title":"parameters"},{"location":"API/REST_APIDoc/#example-body-creation","text":"{ \"name\":\"Putin air\", \"Bearing\": \"90\", \"longitude\": -77.01383, \"latitude\": 38.883, \"FieldOfView\":\"20\", \"Range\":\"500\", \"VideoURLUID\":\"rtmp://64.227.50.48:1935/live/PutinAirVideo\", \"SPILongitude\": -77.01393, \"SPILatitude\": 38.885, \"SPIName\": \"Putin air SPI\" } ``` ##### Example body: updateexisting drone ``` { \"uid\":\"d033fd0c-d5ac-11eb-ab27-4e58de281c19\", \"name\":\"Putin air\", \"timeout\": 40000, \"Bearing\": \"0\", \"longitude\": -77.01399, \"latitude\": 38.889, \"FieldOfView\":\"20\", \"Range\":\"500\", \"VideoURLUID\":\"rtmp://64.227.50.49:1935/live/PutinAirVideo\" } ``` #### postSPI create an SPI at a point or update an existing SPI. If the video source is a UAV, and the UAV is also publishing its own position and sensor point of interest (SPI), those will be plotted on the map. Being able to see the position of the aircraft and know where on the map the camera is looking in real time, while being able to see the video on the same screen, is a huge boost to SA. * verb: POST * endpoint: /Sensor/postSPI * returns: uid #### parameters * timeout: OPTIONAL the length, expressed in seconds until the point will stale out. Default is 300 seconds or 5 minutes. * uid: OPTIONAL input parameter, needed to update existing SPI, * longitude: the angular distance of the geoobject from the meridian of the greenwich, UK expressed in positive or negative float. (e.g -76.107.7998). remember to set the display of your TAK in decimal cohordinates, where *West 77.08* is equal to '-77.08' in the API * latitude: the angular distance of the geoobject from the earths equator expressed in positive or negative float. (e.g 43.855682) * droneUid: the uid of the connected drone * name: the name of the drone, will become also the name of the video stream. #### Example Body { \"uid\": \"e452b6bf-d4f0-11eb-b818-2cf05d092d98\", \"timeout\": 500, \"longitude\": 4, \"latitude\": 8, \"droneUid\": \"d76f608a-d4f0-11eb-b375-2cf05d092d98\", \"name\": \"test\" } ## ManageKML allow to post a set of geo information with attached metadata in tabular format ![image](https://user-images.githubusercontent.com/60719165/125200108-d5a35400-e23f-11eb-934e-fc04210820c4.png) #### postKML * verb: POST * endpoint: /ManageKML/postKML * returns: \"successful\" or HTTP error #### parameters * name: the name of the report * longitude: the angular distance of the geoobject from the meridian of the greenwich, UK expressed in positive or negative float. (e.g -76.107.7998). remember to set the display of your TAK in decimal cohordinates, where *West 77.08* is equal to '-77.08' in the API * latitude: the angular distance of the geoobject from the earths equator expressed in positive or negative float. (e.g 43.855682) * body: an JSON structure of key pairs (name, value) #### Example Body { \"name\": \"Putin Report\", \"longitude\": -77.01399, \"latitude\": 38.889, \"body\" :{ \"userCallsign\": \"Mr Putin\", \"dateTime\": \"2021-07-13\", \"type\": \"Surveillance\", \"eventScale\": \"Capital\", \"importance\": \"Routine\", \"status\": \"FurtherInvestigation\", \"Time Observed\": \"2021-05-13T13:55:05.19Z\", \"Duration of Event\": \"All day\", \"Method Of Detection\": \"General Observation\", \"Surveillance Type\": \"Discreet\", \"Assessed Threats\":\"Threat to Mission\", \"Final Remarks\": \"SNAFU\" } } ```","title":"Example body creation"},{"location":"API/REST_API_InternalDoc/","text":"REST API - Internal Internal APIs are primarly used by the FTS UI to communicate with the server. See also the REST API DOC In the current release (1.5.12), FTS supports following API : authenticate users logs serviceInfo serverHealth systemStatus DataPackageTable MissionTable Authorization: API to use the API you need to have a REST API key. the authorization is placed in the header of the message. Authorization: Bearer [YOUR_API_KEY] you need to use the string 'Bearer' before your API KEY Authorization Websocket to use websocket events you need to trigger the event authenticate after connection and pass as the body of the message {\"Authorization\": [YOUR WEBSOCKET KEY]} Connect description event triggered on initial connection to server Event: connect (this is a special event as it is called automatically on connection) Subscription: connectUpdate returns { \"starttime\": \"\", // time at which server was started \"version\": \"\" // version of FTS currently running } Authenticate description event used to authenticate new clients in the websocket Event: authenticate Subscription: authentication returns will call the event authentication on client with message body {'successful': 'True'/'False'} dependent on whether or not the authentication was accepted. parameters a JSON body in the following format {\"Authorization\": [YOUR WEBSOCKET KEY]} Users description event used to access list of connected client aswell as data relating to each client. Event: users Subscription: userUpdate returns a JSON message containing connected clients { \"Users\":[ \"user:\"{\"ip\": \"24.114.74.13\", \"callsign\": \"CorvoMobile\", \"team\": \"Yellow\"}, \"user:\"{\"ip\": \"24.144.79.13\", \"callsign\": \"Ghost\", \"team\": \"Blue\"} ] } parameters None systemUser retrieve all system users and their associated information Event: systemUser Subscription: systemUserUpdate returns system user information { \"systemUsers\": [ {\"Name\": \"Dan\", \"Group\": \"Yellow\", \"Token\": \"\", \"Password\": \"\", \"Certs\": \"a.zip\", \"Uid\": \"\"}, {\"Name\": \"Joe\", \"Group\": \"Yellow\", \"Token\": \"\", \"Password\": \"\", \"Certs\": \"b.zip\", \"Uid\": \"\"}, {\"Name\": \"Bill\", \"Group\": \"Yellow\", \"Token\": \"\", \"Password\": \"\", \"Certs\": \"c.zip\", \"Uid\": \"\"} ] } parameters None addSystemUser description add one or many system users to the server Event: addSystemUser returns None parameters { \"systemUsers\": [ {\"Name\": \"Dan\", \"Group\": \"Yellow\", \"Token\": \"\", \"Password\": \"\", \"Certs\": \"true\"}, {\"Name\": \"Joe\", \"Group\": \"Blue\", \"Token\": \"\", \"Password\": \"\", \"Certs\": \"true\"}, {\"Name\": \"Bill\", \"Group\": \"Red\", \"Token\": \"\", \"Password\": \"\", \"Certs\": \"true\"} ] } removeSystemUser description remove a system user from the server Event: removeSystemUser returns None parameters { \"systemUsers\": [ {\"uid\": \"[uid of system user to be deleted]\"}, {\"uid\": \"[uid of system user to be deleted]\"}, {\"uid\": \"[uid of system user to be deleted]\"} ] } logs description event used to retrieve recent error log entries from the server Event: logs Subscription: logUpdate returns recent error logs in JSON to the client event logUpdate with data in the following format { \"log_data\": [ {\"time\": \"2020-12-16 21:15:14,618\", \"type\": \"ERROR\", \"file\":\"TCPCoTServiceController.py:31\", \"message\": \"there has been an exception in Data Package service startup maximum recursion depth exceeded while calling a Python object\"} ] } parameters the timestamp on the most recent log entry in format %Y-%m-%d %H:%M:%S,%f events description event used to retrieve last 5 events Event: events Subscription: eventsUpdate returns { \"events\": [\"server event 1\", \"server event 2\", \"server event 3\", \"server event 4\", \"server event 5\"] } parameters None serviceInfo description event used to retrieve information about all services including their current status and port Event: serviceInfo Subscription: serviceInfoUpdate returns status and port of each service aswell as the server starttime to the client event serviceInfoUpdate with body data in the following format { \"services\": { \"SSL_CoT_service\": { \"status\": \"on\", \"port\": 11111 }, \"TCP_CoT_service\": { \"status\": \"off\", \"port\": 55555 }, \"SSL_DataPackage_service\": { \"status\": \"on\", \"port\": 52345 }, \"TCP_DataPackage_service\": { \"status\": \"on\", \"port\": 55235 }, \"Federation_server_service\": { \"status\": \"on\", \"port\": 55235 }, \"Rest_API_service\": { \"status\": \"on\", \"port\": 55235 } }, \"IP\": \"127.0.0.1\" } parameters None serverHealth description event used to retrieve information regarding the status of the server hardware including cpu, disk and memory usage. Event: serverHealth Subscription: serverHealthUpdate returns current hardware usage to the client event serverHealthUpdate with body { \"CPU\": 56, \"memory\": 39, \"disk\": 94 } parameters None systemStatus description event used to execute test of all currently active services and return their respective status. Event: systemStatus Subscription: systemStatusUpdate returns current and expected status of all services on the server in JSON format to the event systemStatusUpdate on the client with the body of the message in the following format { \"services\": { \"SSL_CoT_service\": { \"status_expected\": \"on\", \"status_actual\": \"off\" }, \"TCP_CoT_service\": { \"status_expected\": \"on\", \"satus_actual\": \"on\" }, \"SSL_DataPackage_service\": { \"status_expected\": \"on\", \"status_actual\": \"on\" }, \"TCP_DataPackage_service\": { \"status_expected\": \"on\", \"status_actual\": \"on\" }, \"SSL_Federation_service\": { \"status_expected\": \"off\", \"status_actual\": \"off\" }, \"TCP_API_service\": { \"status_expected\": \"on\", \"status_actual\": \"on\" } } } parameters None changeServiceInfo description Event used to change the status of each service running on the server Event: changeServiceInfo Subscription: systemStatusUpdate returns { \"services\": { \"SSL_CoT_service\": { \"status\": \"on\", \"port\": 11111 }, \"TCP_CoT_service\": { \"status\": \"off\", \"port\": 55555 }, \"SSL_DataPackage_service\": { \"status\": \"on\", \"port\": 52345 }, \"TCP_DataPackage_service\": { \"status\": \"on\", \"port\": 55235 } }, \"ip\": \"127.0.0.1\" } parameters accepts JSON data containing information regarding the desired status of each service in the following format { \"services\": { \"SSL_CoT_service\": { \"status\": \"on\", \"port\": 11111 }, \"TCP_CoT_service\": { \"status\": \"off\", \"port\": 55555 }, \"SSL_DataPackage_service\": { \"status\": \"on\", \"port\": 52345 }, \"TCP_DataPackage_service\": { \"status\": \"on\", \"port\": 55235 } }, \"ip\": \"127.0.0.1\" } ip : ip on which the server should be listening eg: 0.0.0.0 status : whether the service is to be started or stopped eg: on , off port (optional): the port on which the service should be listening eg: 8089 not all services need to be in every message only those you would like to change systemUsers Event used to retrieve all system users Event: systemUsers Subscription: systemUsersUpdate returns the metadata of each user { \"systemUsers\":[ {\"Name\": \"Dan\", \"Group\": \"Yellow\", \"Token\": \"Token1\", \"Password\": \"psw1\", , \"Certs\": \"a.zip\"}, {\"Name\": \"Joe\", \"Group\": \"Yellow\", \"Token\": \"Token1\", \"Password\": \"psw1\", , \"Certs\": \"a.zip\"}, {\"Name\": \"Bill\", \"Group\": \"Yellow\", \"Token\": \"Token1\", \"Password\": \"psw1\", , \"Certs\": \"a.zip\"} ] } parameters None addSystemUsers used to create a new system user on the server Event: addSystemUsers returns None parameters { \"systemUsers\":[ {\"Name\":\"dan\", \"Group\":\"Yellow\", \"Token\":\"token\", \"Password\": \"psw1\", \"Certs\":\"true\" } ] } Name: name of user Group: group of user Token: api token of user(optional) Password: password for user(optional) Certs: whether the user should have certs generated(should be true in ui) removeSystemUsers used to remove a system user and their associated files from the server Event: removeSystemUsers returns None parameters { \"systemUsers\": [ { \"uid\": \"46b3de87-85f5-400d-a098-536f2e1421ce\" } ] } uid: uid of user to remove DataPackageTable description Endpoint used to access data regarding DataPackages methods POST GET DELETE GET returns JSON data containing information regarding all DataPackages currently on server { \"DataPackages\":[ {\"Keywords\": \"88.104.44.76\", \"name\": \"WWIII Locations\",\"privacy\":\"public\", \"size\":\"345KB\", \"submitted\":\"2020-02-10\" }, {\"Keywords\": \"112.144.567.257\", \"name\": \"WWIII Locations\",\"privacy\":\"public\", \"size\":\"345KB\", \"submitted\":\"2020-02-10\" } ] } POST accepts the zipped form of the file in the body of the message and the following arguments in the url * filename: the name of the zipped file * creatorUid(optional): the uid of the user associated with the DataPackage defaults to server if none is provided DELETE accepts the following JSON data { \"DataPackages\":[ {\"hash\": \"194728885783f87ws84888943fjew\"}, {\"hash\": \"19472mw45783f7ws848758943fjegr\"} ] } the hash values are the hashes of DataPackages to be deleted PUT accepts the following JSON data { \"DataPackages\":[ {\"PrimaryKey\": \"1\", \"Name\": \"new_name\", \"Keywords\": \"new keywords\", \"Privacy\": \"0\"} ] } PrimaryKey: primary key of DataPackage to be modified Name: optional new name of DataPackage if not set name will not be changed Keywords: optional new keywords of DataPackage if not set keywords will not be changed Privacy: optional new privacy of DataPackage if not set privacy will not be changed must be 1(Private) or 0(Public) MissionTable description Endpoint used to access data regarding mission packages methods GET POST DELETE GET return JSON data containing information about all current Missions with the following format { \"version\": \"3\", \"type\": \"Mission\", \"data\": [{ \"name\": \"save the world\", \"description\": \"Protect the world from Aliens\", \"chatRoom\": \"\", \"tool\": \"public\", \"keywords\": [\"War\"], \"creatorUid\": \"Anonymous\", \"createTime\": \"2020-12-09T15:53:42.873Z\", \"groups\": [\"__ANON__\"], \"externalData\": [], \"uids\": [{ \"data\": \"32e9089c-6ae0-4c7e-b4cd-cb16d3f46933\", \"timestamp\": \"2020-12-09T15:58:10.635Z\", \"creatorUid\": \"aa0b0312-b5cd-4c2c-bbbc-9c4c70216261\", \"details\": { \"type\": \"a-h-G\", \"callsign\": \"R.9.155734\", \"iconsetPath\": \"COT_MAPPING_2525B/a-h/a-h-G\" } } ], \"contents\": [{ \"data\": { \"filename\": \"Sout\", \"keywords\": [], \"mimeType\": \"application/octet-stream\", \"name\": \"SWN Threat\", \"submissionTime\": \"2020-12-09T15:55:21.468Z\", \"submitter\": \"anonymous\", \"uid\": \"3ec22850-d6de-44a5-b79c-3af16695af60\", \"hash\": \"8a99e610d223426caaf267f12c3100513bbb62a66d07c5feb624d4cf5b90b69b\", \"size\": 18360 }, \"timestamp\": \"2020-12-09T15:55:21.559Z\", \"creatorUid\": \"Anonymous\" } ], \"passwordProtected\": false } ], \"nodeId\": \"6ff99444fa124679a3943ee90308a44c9d794c02-e5a5-42b5-b4c8-625203ea1287\" } POST not yet implemented DELETE not yet implemented ExCheck table Endpoint used to access data regarding ExCheck items such as checklists and templates POST creates a template on the server from a supplied xml file accepting the following URL encoded values: * clientUid: the uid of the client to be recognized as the creator of the template body of the message should be the xml of the template DELETE accepts the following data { \"ExCheck\": { \"Templates\": [{\"uid\": \"TemplateUID1\"}, {\"uid\": \"TemplateUID2\"}], \"Checklists\": [{\"uid\": \"ChecklistUID1\"}, {\"uid\": \"ChecklistUID2\"}] } } uid : the uid of those Checklists and Templates to be deleted GET return JSON data containing the following information about Checklists and Templates present on the server { \"ExCheck\": { \"Templates\": [ { \"filename\": \"cdd39d06-b43e-42f4-839d-32362febe9a1.xml\", (name of file containing template xml) \"name\": \"test from atak\", (name associated with template) \"submissionTime\": \"2020-12-22T22:07:31.749284Z\", (time template was submitted to server) \"submitter\": \"[('NOVA',)]\", (callsign of submitter) \"uid\": \"cdd39d06-b43e-42f4-839d-32362febe9a1\", (uid of template) \"hash\": \"bfb97ed985f789b0c97cf3a93a4354e36eadadd0b6d156c4e4a5ad25330a8c45\", (hash of template) \"size\": 1735, (size of template in bytes) \"description\": \"test from atak desc\" (description of template) } ], \"Checklists\": [ { \"filename\": \"c5322e53-5b95-4def-953d-6be9e42e79fd.xml\", (name of file containing checklist xml) \"name\": \"test from atak\", (name associated with template) \"startTime\": \"2020-12-22T22:07:32.841000Z\", (time checklist was created) \"submitter\": \"NOVA\", (callsign of user to submit checklist) \"uid\": \"c5322e53-5b95-4def-953d-6be9e42e79fd\", (uid of checklist) \"description\": \"test from atak desc\", (description of checklist) \"template\":\"cdd39d06-b43e-42f4-839d-32362febe9a1\" (uid of template of which the checklist is an instance) } ] } } FederationTable endpoint used to access federation objects GET return JSON data containing the following information regarding current checklists and templates present on the server { \"activeFederations\": [ { \"id\": \"111-111-111\", \"address\": \"127.0.0.1\", \"port\": \"9000\", \"initiator\": \"Self\", \"readCount\": \"0\", \"processedCount\": \"0\" } { \"id\": \"111-111-112\", \"address\": \"1.1.1.1\", \"port\": \"11111\", \"initiator\": \"Remote\", \"readCount\": \"0\", \"processedCount\": \"0\" } ], \"federations\": [ { \"name\": \"federation 1\", \"id\": \"111-111-111\", \"address\": \"127.0.0.1\", \"port\": \"9000\", \"fallBack\": \"federation 2\", \"status\": \"Disabled\", \"reconnectInterval\": \"32\", \"maxRetries\": \"15\", \"lastError\": \"Timeout\" } ] } POST create a new federation configuration { \"outgoingFederations\": [ { \"name\": \"federation 1\", \"address\": \"127.0.0.1\", \"port\": \"9000\", \"fallBack\": \"federation 2\", \"status\": \"Disabled\", \"reconnectInterval\": \"32\", \"maxRetries\": \"15\" } ] } DELETE delete an existing federation configuration { \"federations\": [ { \"id\": \"111-111-111\" } ] } PUT modify an existing federation configuration { \"federations\": [ { \"id\": \"111-111-111\", \"name\": \"new federation 1\", \"fallBack\": \"new fallback\", \"status\": \"Enabled\", \"reconnectInterval\": \"15\", \"maxRetries\": \"10\" } ] } id: must be id of existing federation configuration name(optional): new name of federation configuration fallback(optional): name of new fallback status(optional): new status of connection reconnectInterval(optional): new reconnect interval maxRetries(optional): new maximum number of retries","title":"REST API - Internal"},{"location":"API/REST_API_InternalDoc/#rest-api-internal","text":"Internal APIs are primarly used by the FTS UI to communicate with the server. See also the REST API DOC In the current release (1.5.12), FTS supports following API : authenticate users logs serviceInfo serverHealth systemStatus DataPackageTable MissionTable","title":"REST API - Internal"},{"location":"API/REST_API_InternalDoc/#authorization-api","text":"to use the API you need to have a REST API key. the authorization is placed in the header of the message. Authorization: Bearer [YOUR_API_KEY] you need to use the string 'Bearer' before your API KEY","title":"Authorization: API"},{"location":"API/REST_API_InternalDoc/#authorization-websocket","text":"to use websocket events you need to trigger the event authenticate after connection and pass as the body of the message {\"Authorization\": [YOUR WEBSOCKET KEY]}","title":"Authorization Websocket"},{"location":"API/REST_API_InternalDoc/#connect","text":"","title":"Connect"},{"location":"API/REST_API_InternalDoc/#description","text":"event triggered on initial connection to server Event: connect (this is a special event as it is called automatically on connection) Subscription: connectUpdate","title":"description"},{"location":"API/REST_API_InternalDoc/#returns","text":"{ \"starttime\": \"\", // time at which server was started \"version\": \"\" // version of FTS currently running }","title":"returns"},{"location":"API/REST_API_InternalDoc/#authenticate","text":"","title":"Authenticate"},{"location":"API/REST_API_InternalDoc/#description_1","text":"event used to authenticate new clients in the websocket Event: authenticate Subscription: authentication","title":"description"},{"location":"API/REST_API_InternalDoc/#returns_1","text":"will call the event authentication on client with message body {'successful': 'True'/'False'} dependent on whether or not the authentication was accepted.","title":"returns"},{"location":"API/REST_API_InternalDoc/#parameters","text":"a JSON body in the following format {\"Authorization\": [YOUR WEBSOCKET KEY]}","title":"parameters"},{"location":"API/REST_API_InternalDoc/#users","text":"","title":"Users"},{"location":"API/REST_API_InternalDoc/#description_2","text":"event used to access list of connected client aswell as data relating to each client. Event: users Subscription: userUpdate","title":"description"},{"location":"API/REST_API_InternalDoc/#returns_2","text":"a JSON message containing connected clients { \"Users\":[ \"user:\"{\"ip\": \"24.114.74.13\", \"callsign\": \"CorvoMobile\", \"team\": \"Yellow\"}, \"user:\"{\"ip\": \"24.144.79.13\", \"callsign\": \"Ghost\", \"team\": \"Blue\"} ] }","title":"returns"},{"location":"API/REST_API_InternalDoc/#parameters_1","text":"None","title":"parameters"},{"location":"API/REST_API_InternalDoc/#systemuser","text":"retrieve all system users and their associated information Event: systemUser Subscription: systemUserUpdate","title":"systemUser"},{"location":"API/REST_API_InternalDoc/#returns_3","text":"system user information { \"systemUsers\": [ {\"Name\": \"Dan\", \"Group\": \"Yellow\", \"Token\": \"\", \"Password\": \"\", \"Certs\": \"a.zip\", \"Uid\": \"\"}, {\"Name\": \"Joe\", \"Group\": \"Yellow\", \"Token\": \"\", \"Password\": \"\", \"Certs\": \"b.zip\", \"Uid\": \"\"}, {\"Name\": \"Bill\", \"Group\": \"Yellow\", \"Token\": \"\", \"Password\": \"\", \"Certs\": \"c.zip\", \"Uid\": \"\"} ] }","title":"returns"},{"location":"API/REST_API_InternalDoc/#parameters_2","text":"None","title":"parameters"},{"location":"API/REST_API_InternalDoc/#addsystemuser","text":"","title":"addSystemUser"},{"location":"API/REST_API_InternalDoc/#description_3","text":"add one or many system users to the server Event: addSystemUser","title":"description"},{"location":"API/REST_API_InternalDoc/#returns_4","text":"None","title":"returns"},{"location":"API/REST_API_InternalDoc/#parameters_3","text":"{ \"systemUsers\": [ {\"Name\": \"Dan\", \"Group\": \"Yellow\", \"Token\": \"\", \"Password\": \"\", \"Certs\": \"true\"}, {\"Name\": \"Joe\", \"Group\": \"Blue\", \"Token\": \"\", \"Password\": \"\", \"Certs\": \"true\"}, {\"Name\": \"Bill\", \"Group\": \"Red\", \"Token\": \"\", \"Password\": \"\", \"Certs\": \"true\"} ] }","title":"parameters"},{"location":"API/REST_API_InternalDoc/#removesystemuser","text":"","title":"removeSystemUser"},{"location":"API/REST_API_InternalDoc/#description_4","text":"remove a system user from the server Event: removeSystemUser","title":"description"},{"location":"API/REST_API_InternalDoc/#returns_5","text":"None","title":"returns"},{"location":"API/REST_API_InternalDoc/#parameters_4","text":"{ \"systemUsers\": [ {\"uid\": \"[uid of system user to be deleted]\"}, {\"uid\": \"[uid of system user to be deleted]\"}, {\"uid\": \"[uid of system user to be deleted]\"} ] }","title":"parameters"},{"location":"API/REST_API_InternalDoc/#logs","text":"","title":"logs"},{"location":"API/REST_API_InternalDoc/#description_5","text":"event used to retrieve recent error log entries from the server Event: logs Subscription: logUpdate","title":"description"},{"location":"API/REST_API_InternalDoc/#returns_6","text":"recent error logs in JSON to the client event logUpdate with data in the following format { \"log_data\": [ {\"time\": \"2020-12-16 21:15:14,618\", \"type\": \"ERROR\", \"file\":\"TCPCoTServiceController.py:31\", \"message\": \"there has been an exception in Data Package service startup maximum recursion depth exceeded while calling a Python object\"} ] }","title":"returns"},{"location":"API/REST_API_InternalDoc/#parameters_5","text":"the timestamp on the most recent log entry in format %Y-%m-%d %H:%M:%S,%f","title":"parameters"},{"location":"API/REST_API_InternalDoc/#events","text":"","title":"events"},{"location":"API/REST_API_InternalDoc/#description_6","text":"event used to retrieve last 5 events Event: events Subscription: eventsUpdate","title":"description"},{"location":"API/REST_API_InternalDoc/#returns_7","text":"{ \"events\": [\"server event 1\", \"server event 2\", \"server event 3\", \"server event 4\", \"server event 5\"] }","title":"returns"},{"location":"API/REST_API_InternalDoc/#parameters_6","text":"None","title":"parameters"},{"location":"API/REST_API_InternalDoc/#serviceinfo","text":"","title":"serviceInfo"},{"location":"API/REST_API_InternalDoc/#description_7","text":"event used to retrieve information about all services including their current status and port Event: serviceInfo Subscription: serviceInfoUpdate","title":"description"},{"location":"API/REST_API_InternalDoc/#returns_8","text":"status and port of each service aswell as the server starttime to the client event serviceInfoUpdate with body data in the following format { \"services\": { \"SSL_CoT_service\": { \"status\": \"on\", \"port\": 11111 }, \"TCP_CoT_service\": { \"status\": \"off\", \"port\": 55555 }, \"SSL_DataPackage_service\": { \"status\": \"on\", \"port\": 52345 }, \"TCP_DataPackage_service\": { \"status\": \"on\", \"port\": 55235 }, \"Federation_server_service\": { \"status\": \"on\", \"port\": 55235 }, \"Rest_API_service\": { \"status\": \"on\", \"port\": 55235 } }, \"IP\": \"127.0.0.1\" }","title":"returns"},{"location":"API/REST_API_InternalDoc/#parameters_7","text":"None","title":"parameters"},{"location":"API/REST_API_InternalDoc/#serverhealth","text":"","title":"serverHealth"},{"location":"API/REST_API_InternalDoc/#description_8","text":"event used to retrieve information regarding the status of the server hardware including cpu, disk and memory usage. Event: serverHealth Subscription: serverHealthUpdate","title":"description"},{"location":"API/REST_API_InternalDoc/#returns_9","text":"current hardware usage to the client event serverHealthUpdate with body { \"CPU\": 56, \"memory\": 39, \"disk\": 94 }","title":"returns"},{"location":"API/REST_API_InternalDoc/#parameters_8","text":"None","title":"parameters"},{"location":"API/REST_API_InternalDoc/#systemstatus","text":"","title":"systemStatus"},{"location":"API/REST_API_InternalDoc/#description_9","text":"event used to execute test of all currently active services and return their respective status. Event: systemStatus Subscription: systemStatusUpdate","title":"description"},{"location":"API/REST_API_InternalDoc/#returns_10","text":"current and expected status of all services on the server in JSON format to the event systemStatusUpdate on the client with the body of the message in the following format { \"services\": { \"SSL_CoT_service\": { \"status_expected\": \"on\", \"status_actual\": \"off\" }, \"TCP_CoT_service\": { \"status_expected\": \"on\", \"satus_actual\": \"on\" }, \"SSL_DataPackage_service\": { \"status_expected\": \"on\", \"status_actual\": \"on\" }, \"TCP_DataPackage_service\": { \"status_expected\": \"on\", \"status_actual\": \"on\" }, \"SSL_Federation_service\": { \"status_expected\": \"off\", \"status_actual\": \"off\" }, \"TCP_API_service\": { \"status_expected\": \"on\", \"status_actual\": \"on\" } } }","title":"returns"},{"location":"API/REST_API_InternalDoc/#parameters_9","text":"None","title":"parameters"},{"location":"API/REST_API_InternalDoc/#changeserviceinfo","text":"","title":"changeServiceInfo"},{"location":"API/REST_API_InternalDoc/#description_10","text":"Event used to change the status of each service running on the server Event: changeServiceInfo Subscription: systemStatusUpdate","title":"description"},{"location":"API/REST_API_InternalDoc/#returns_11","text":"{ \"services\": { \"SSL_CoT_service\": { \"status\": \"on\", \"port\": 11111 }, \"TCP_CoT_service\": { \"status\": \"off\", \"port\": 55555 }, \"SSL_DataPackage_service\": { \"status\": \"on\", \"port\": 52345 }, \"TCP_DataPackage_service\": { \"status\": \"on\", \"port\": 55235 } }, \"ip\": \"127.0.0.1\" }","title":"returns"},{"location":"API/REST_API_InternalDoc/#parameters_10","text":"accepts JSON data containing information regarding the desired status of each service in the following format { \"services\": { \"SSL_CoT_service\": { \"status\": \"on\", \"port\": 11111 }, \"TCP_CoT_service\": { \"status\": \"off\", \"port\": 55555 }, \"SSL_DataPackage_service\": { \"status\": \"on\", \"port\": 52345 }, \"TCP_DataPackage_service\": { \"status\": \"on\", \"port\": 55235 } }, \"ip\": \"127.0.0.1\" } ip : ip on which the server should be listening eg: 0.0.0.0 status : whether the service is to be started or stopped eg: on , off port (optional): the port on which the service should be listening eg: 8089 not all services need to be in every message only those you would like to change","title":"parameters"},{"location":"API/REST_API_InternalDoc/#systemusers","text":"Event used to retrieve all system users Event: systemUsers Subscription: systemUsersUpdate","title":"systemUsers"},{"location":"API/REST_API_InternalDoc/#returns_12","text":"the metadata of each user { \"systemUsers\":[ {\"Name\": \"Dan\", \"Group\": \"Yellow\", \"Token\": \"Token1\", \"Password\": \"psw1\", , \"Certs\": \"a.zip\"}, {\"Name\": \"Joe\", \"Group\": \"Yellow\", \"Token\": \"Token1\", \"Password\": \"psw1\", , \"Certs\": \"a.zip\"}, {\"Name\": \"Bill\", \"Group\": \"Yellow\", \"Token\": \"Token1\", \"Password\": \"psw1\", , \"Certs\": \"a.zip\"} ] }","title":"returns"},{"location":"API/REST_API_InternalDoc/#parameters_11","text":"None","title":"parameters"},{"location":"API/REST_API_InternalDoc/#addsystemusers","text":"used to create a new system user on the server Event: addSystemUsers","title":"addSystemUsers"},{"location":"API/REST_API_InternalDoc/#returns_13","text":"None","title":"returns"},{"location":"API/REST_API_InternalDoc/#parameters_12","text":"{ \"systemUsers\":[ {\"Name\":\"dan\", \"Group\":\"Yellow\", \"Token\":\"token\", \"Password\": \"psw1\", \"Certs\":\"true\" } ] } Name: name of user Group: group of user Token: api token of user(optional) Password: password for user(optional) Certs: whether the user should have certs generated(should be true in ui)","title":"parameters"},{"location":"API/REST_API_InternalDoc/#removesystemusers","text":"used to remove a system user and their associated files from the server Event: removeSystemUsers","title":"removeSystemUsers"},{"location":"API/REST_API_InternalDoc/#returns_14","text":"None","title":"returns"},{"location":"API/REST_API_InternalDoc/#parameters_13","text":"{ \"systemUsers\": [ { \"uid\": \"46b3de87-85f5-400d-a098-536f2e1421ce\" } ] } uid: uid of user to remove","title":"parameters"},{"location":"API/REST_API_InternalDoc/#datapackagetable","text":"","title":"DataPackageTable"},{"location":"API/REST_API_InternalDoc/#description_11","text":"Endpoint used to access data regarding DataPackages","title":"description"},{"location":"API/REST_API_InternalDoc/#methods","text":"POST GET DELETE","title":"methods"},{"location":"API/REST_API_InternalDoc/#get","text":"returns JSON data containing information regarding all DataPackages currently on server { \"DataPackages\":[ {\"Keywords\": \"88.104.44.76\", \"name\": \"WWIII Locations\",\"privacy\":\"public\", \"size\":\"345KB\", \"submitted\":\"2020-02-10\" }, {\"Keywords\": \"112.144.567.257\", \"name\": \"WWIII Locations\",\"privacy\":\"public\", \"size\":\"345KB\", \"submitted\":\"2020-02-10\" } ] }","title":"GET"},{"location":"API/REST_API_InternalDoc/#post","text":"accepts the zipped form of the file in the body of the message and the following arguments in the url * filename: the name of the zipped file * creatorUid(optional): the uid of the user associated with the DataPackage defaults to server if none is provided","title":"POST"},{"location":"API/REST_API_InternalDoc/#delete","text":"accepts the following JSON data { \"DataPackages\":[ {\"hash\": \"194728885783f87ws84888943fjew\"}, {\"hash\": \"19472mw45783f7ws848758943fjegr\"} ] } the hash values are the hashes of DataPackages to be deleted","title":"DELETE"},{"location":"API/REST_API_InternalDoc/#put","text":"accepts the following JSON data { \"DataPackages\":[ {\"PrimaryKey\": \"1\", \"Name\": \"new_name\", \"Keywords\": \"new keywords\", \"Privacy\": \"0\"} ] } PrimaryKey: primary key of DataPackage to be modified Name: optional new name of DataPackage if not set name will not be changed Keywords: optional new keywords of DataPackage if not set keywords will not be changed Privacy: optional new privacy of DataPackage if not set privacy will not be changed must be 1(Private) or 0(Public)","title":"PUT"},{"location":"API/REST_API_InternalDoc/#missiontable","text":"","title":"MissionTable"},{"location":"API/REST_API_InternalDoc/#description_12","text":"Endpoint used to access data regarding mission packages","title":"description"},{"location":"API/REST_API_InternalDoc/#methods_1","text":"GET POST DELETE","title":"methods"},{"location":"API/REST_API_InternalDoc/#get_1","text":"return JSON data containing information about all current Missions with the following format { \"version\": \"3\", \"type\": \"Mission\", \"data\": [{ \"name\": \"save the world\", \"description\": \"Protect the world from Aliens\", \"chatRoom\": \"\", \"tool\": \"public\", \"keywords\": [\"War\"], \"creatorUid\": \"Anonymous\", \"createTime\": \"2020-12-09T15:53:42.873Z\", \"groups\": [\"__ANON__\"], \"externalData\": [], \"uids\": [{ \"data\": \"32e9089c-6ae0-4c7e-b4cd-cb16d3f46933\", \"timestamp\": \"2020-12-09T15:58:10.635Z\", \"creatorUid\": \"aa0b0312-b5cd-4c2c-bbbc-9c4c70216261\", \"details\": { \"type\": \"a-h-G\", \"callsign\": \"R.9.155734\", \"iconsetPath\": \"COT_MAPPING_2525B/a-h/a-h-G\" } } ], \"contents\": [{ \"data\": { \"filename\": \"Sout\", \"keywords\": [], \"mimeType\": \"application/octet-stream\", \"name\": \"SWN Threat\", \"submissionTime\": \"2020-12-09T15:55:21.468Z\", \"submitter\": \"anonymous\", \"uid\": \"3ec22850-d6de-44a5-b79c-3af16695af60\", \"hash\": \"8a99e610d223426caaf267f12c3100513bbb62a66d07c5feb624d4cf5b90b69b\", \"size\": 18360 }, \"timestamp\": \"2020-12-09T15:55:21.559Z\", \"creatorUid\": \"Anonymous\" } ], \"passwordProtected\": false } ], \"nodeId\": \"6ff99444fa124679a3943ee90308a44c9d794c02-e5a5-42b5-b4c8-625203ea1287\" }","title":"GET"},{"location":"API/REST_API_InternalDoc/#post_1","text":"not yet implemented","title":"POST"},{"location":"API/REST_API_InternalDoc/#delete_1","text":"not yet implemented","title":"DELETE"},{"location":"API/REST_API_InternalDoc/#excheck-table","text":"Endpoint used to access data regarding ExCheck items such as checklists and templates","title":"ExCheck table"},{"location":"API/REST_API_InternalDoc/#post_2","text":"creates a template on the server from a supplied xml file accepting the following URL encoded values: * clientUid: the uid of the client to be recognized as the creator of the template body of the message should be the xml of the template","title":"POST"},{"location":"API/REST_API_InternalDoc/#delete_2","text":"accepts the following data { \"ExCheck\": { \"Templates\": [{\"uid\": \"TemplateUID1\"}, {\"uid\": \"TemplateUID2\"}], \"Checklists\": [{\"uid\": \"ChecklistUID1\"}, {\"uid\": \"ChecklistUID2\"}] } } uid : the uid of those Checklists and Templates to be deleted","title":"DELETE"},{"location":"API/REST_API_InternalDoc/#get_2","text":"return JSON data containing the following information about Checklists and Templates present on the server { \"ExCheck\": { \"Templates\": [ { \"filename\": \"cdd39d06-b43e-42f4-839d-32362febe9a1.xml\", (name of file containing template xml) \"name\": \"test from atak\", (name associated with template) \"submissionTime\": \"2020-12-22T22:07:31.749284Z\", (time template was submitted to server) \"submitter\": \"[('NOVA',)]\", (callsign of submitter) \"uid\": \"cdd39d06-b43e-42f4-839d-32362febe9a1\", (uid of template) \"hash\": \"bfb97ed985f789b0c97cf3a93a4354e36eadadd0b6d156c4e4a5ad25330a8c45\", (hash of template) \"size\": 1735, (size of template in bytes) \"description\": \"test from atak desc\" (description of template) } ], \"Checklists\": [ { \"filename\": \"c5322e53-5b95-4def-953d-6be9e42e79fd.xml\", (name of file containing checklist xml) \"name\": \"test from atak\", (name associated with template) \"startTime\": \"2020-12-22T22:07:32.841000Z\", (time checklist was created) \"submitter\": \"NOVA\", (callsign of user to submit checklist) \"uid\": \"c5322e53-5b95-4def-953d-6be9e42e79fd\", (uid of checklist) \"description\": \"test from atak desc\", (description of checklist) \"template\":\"cdd39d06-b43e-42f4-839d-32362febe9a1\" (uid of template of which the checklist is an instance) } ] } }","title":"GET"},{"location":"API/REST_API_InternalDoc/#federationtable","text":"endpoint used to access federation objects","title":"FederationTable"},{"location":"API/REST_API_InternalDoc/#get_3","text":"return JSON data containing the following information regarding current checklists and templates present on the server { \"activeFederations\": [ { \"id\": \"111-111-111\", \"address\": \"127.0.0.1\", \"port\": \"9000\", \"initiator\": \"Self\", \"readCount\": \"0\", \"processedCount\": \"0\" } { \"id\": \"111-111-112\", \"address\": \"1.1.1.1\", \"port\": \"11111\", \"initiator\": \"Remote\", \"readCount\": \"0\", \"processedCount\": \"0\" } ], \"federations\": [ { \"name\": \"federation 1\", \"id\": \"111-111-111\", \"address\": \"127.0.0.1\", \"port\": \"9000\", \"fallBack\": \"federation 2\", \"status\": \"Disabled\", \"reconnectInterval\": \"32\", \"maxRetries\": \"15\", \"lastError\": \"Timeout\" } ] }","title":"GET"},{"location":"API/REST_API_InternalDoc/#post_3","text":"create a new federation configuration { \"outgoingFederations\": [ { \"name\": \"federation 1\", \"address\": \"127.0.0.1\", \"port\": \"9000\", \"fallBack\": \"federation 2\", \"status\": \"Disabled\", \"reconnectInterval\": \"32\", \"maxRetries\": \"15\" } ] }","title":"POST"},{"location":"API/REST_API_InternalDoc/#delete_3","text":"delete an existing federation configuration { \"federations\": [ { \"id\": \"111-111-111\" } ] }","title":"DELETE"},{"location":"API/REST_API_InternalDoc/#put_1","text":"modify an existing federation configuration { \"federations\": [ { \"id\": \"111-111-111\", \"name\": \"new federation 1\", \"fallBack\": \"new fallback\", \"status\": \"Enabled\", \"reconnectInterval\": \"15\", \"maxRetries\": \"10\" } ] } id: must be id of existing federation configuration name(optional): new name of federation configuration fallback(optional): name of new fallback status(optional): new status of connection reconnectInterval(optional): new reconnect interval maxRetries(optional): new maximum number of retries","title":"PUT"},{"location":"Installation/Video%20Guides/","text":"RPiFTS Series GHOST_DA-B6 has created a set of videos on youtube detailing how to install and set up FTS on raspberry pi SBC's. You can view his RPiFTS video series on his channel .","title":"Video Guides"},{"location":"Installation/Video%20Guides/#rpifts-series","text":"GHOST_DA-B6 has created a set of videos on youtube detailing how to install and set up FTS on raspberry pi SBC's. You can view his RPiFTS video series on his channel .","title":"RPiFTS Series"},{"location":"Installation/installUIOnAndroid/","text":"FTS-UI Installation with Android FTS-UI is installed with python's pip. One way to get pip on Android is with Pydroid3, available here: https://play.google.com/store/apps/details?id=ru.iiec.pydroid3 If you've installed Pydroid3 open the App and navigate to the terminal: - In the upper right corner of Pydroid3, touch the 3 horizontal bars. - Select \"Terminal\" - Enter the following commands: pip3 install FreeTAKServer-UI==0.1.6.5 pip3 install SQLAlchemy==1.3.23 pip3 install requests pip3 install eventlet pip3 show eventlet After eventlet installs we need to update a file to hardcode the tcp/udp protocol numbers due to incompatiabilities with Android - The output of pip3 show eventlet Location should be similar to /data/user/0/ru.iiec.pydroid3/files/arm-linux-androideabi/lib/python3.8/site-packages - The file we need to update with the tcp/udp protocol numbers is located in dns/rdtypes/IN/WKS.py - The full path of the file to edit using the eventlet Location output: /data/user/0/ru.iiec.pydroid3/files/arm-linux-androideabi/lib/python3.8/site-packages/dns/rdtypes/IN/WKS.py Now edit WKS.py and update as indicated below: BEFORE: _proto_tcp = socket.getprotobyname('tcp') _proto_udp = socket.getprotobyname('udp') AFTER: _proto_tcp = 6 _proto_udp = 17 FTS-UI config.py assumes a Linux environment, we need to update this for Android by replacing the appropriate paths with /sdcard for the following: - SQLALCHEMY_DATABASE_URI - certpath - If you are not running FTS and FTS-UI on the same device you will need to update IP - The config file is located here: /data/user/0/ru.iiec.pydroid3/files/arm-linux-androideabi/lib/python3.8/site-packages/FreeTAKServer-UI/config.py Now edit config.py and update as indicated below: BEFORE: # This will connect to the FTS db SQLALCHEMY_DATABASE_URI = 'sqlite:///' + '/root/FTSDataBase.db' # certificates path certpath = \"/usr/local/lib/python3.8/dist-packages/FreeTAKServer/certs/\" AFTER: # This will connect to the FTS db SQLALCHEMY_DATABASE_URI = 'sqlite:///' + r'/sdcard/FTSDataBase.db' # certificates path certpath = \"/sdcard/FreeTAKServer/certs/\" Run FTS-UI Make sure your FTS is already up and running. From the pydroid3 terminal FLASK_APP=/data/user/0/ru.iiec.pydroid3/files/arm-linux-androideabi/lib/python3.8/site-packages/FreeTAKServer-UI/run.py nohup python3 /data/user/0/ru.iiec.pydroid3/files/arm-linux-androideabi/lib/python3.8/site-packages/FreeTAKServer-UI/run.py Now open your web browser and navigate to http://127.0.0.1:5000 and login with the default creds (admin/password) Troubleshooting Error: ImportError: cannot import name '_ColumnEntity' from 'sqlalchemy.orm.query' Solution: You didn't downgrade SQLAlchemy correctly Error: Protocol not found Solution: You didn't update WKS.py correctly Notes All testing was performed with a RPi4 8GB running LineageOS 18.1 32bit and Pydroid3 These instructions assume you are running FTS and FTS-UI on the same device We downgrade SQLAlchemy because versions 1.4+ were not compatiable with SQLAlchemy-utils You need root access to update the tcp/udp protocol numbers (if you are using a RPi4 and LineageOS its trivial to enable)","title":"FTS-UI Installation with Android"},{"location":"Installation/installUIOnAndroid/#fts-ui-installation-with-android","text":"FTS-UI is installed with python's pip. One way to get pip on Android is with Pydroid3, available here: https://play.google.com/store/apps/details?id=ru.iiec.pydroid3 If you've installed Pydroid3 open the App and navigate to the terminal: - In the upper right corner of Pydroid3, touch the 3 horizontal bars. - Select \"Terminal\" - Enter the following commands: pip3 install FreeTAKServer-UI==0.1.6.5 pip3 install SQLAlchemy==1.3.23 pip3 install requests pip3 install eventlet pip3 show eventlet After eventlet installs we need to update a file to hardcode the tcp/udp protocol numbers due to incompatiabilities with Android - The output of pip3 show eventlet Location should be similar to /data/user/0/ru.iiec.pydroid3/files/arm-linux-androideabi/lib/python3.8/site-packages - The file we need to update with the tcp/udp protocol numbers is located in dns/rdtypes/IN/WKS.py - The full path of the file to edit using the eventlet Location output: /data/user/0/ru.iiec.pydroid3/files/arm-linux-androideabi/lib/python3.8/site-packages/dns/rdtypes/IN/WKS.py Now edit WKS.py and update as indicated below: BEFORE: _proto_tcp = socket.getprotobyname('tcp') _proto_udp = socket.getprotobyname('udp') AFTER: _proto_tcp = 6 _proto_udp = 17 FTS-UI config.py assumes a Linux environment, we need to update this for Android by replacing the appropriate paths with /sdcard for the following: - SQLALCHEMY_DATABASE_URI - certpath - If you are not running FTS and FTS-UI on the same device you will need to update IP - The config file is located here: /data/user/0/ru.iiec.pydroid3/files/arm-linux-androideabi/lib/python3.8/site-packages/FreeTAKServer-UI/config.py Now edit config.py and update as indicated below: BEFORE: # This will connect to the FTS db SQLALCHEMY_DATABASE_URI = 'sqlite:///' + '/root/FTSDataBase.db' # certificates path certpath = \"/usr/local/lib/python3.8/dist-packages/FreeTAKServer/certs/\" AFTER: # This will connect to the FTS db SQLALCHEMY_DATABASE_URI = 'sqlite:///' + r'/sdcard/FTSDataBase.db' # certificates path certpath = \"/sdcard/FreeTAKServer/certs/\"","title":"FTS-UI Installation with Android"},{"location":"Installation/installUIOnAndroid/#run-fts-ui","text":"Make sure your FTS is already up and running. From the pydroid3 terminal FLASK_APP=/data/user/0/ru.iiec.pydroid3/files/arm-linux-androideabi/lib/python3.8/site-packages/FreeTAKServer-UI/run.py nohup python3 /data/user/0/ru.iiec.pydroid3/files/arm-linux-androideabi/lib/python3.8/site-packages/FreeTAKServer-UI/run.py Now open your web browser and navigate to http://127.0.0.1:5000 and login with the default creds (admin/password)","title":"Run FTS-UI"},{"location":"Installation/installUIOnAndroid/#troubleshooting","text":"Error: ImportError: cannot import name '_ColumnEntity' from 'sqlalchemy.orm.query' Solution: You didn't downgrade SQLAlchemy correctly Error: Protocol not found Solution: You didn't update WKS.py correctly","title":"Troubleshooting"},{"location":"Installation/installUIOnAndroid/#notes","text":"All testing was performed with a RPi4 8GB running LineageOS 18.1 32bit and Pydroid3 These instructions assume you are running FTS and FTS-UI on the same device We downgrade SQLAlchemy because versions 1.4+ were not compatiable with SQLAlchemy-utils You need root access to update the tcp/udp protocol numbers (if you are using a RPi4 and LineageOS its trivial to enable)","title":"Notes"},{"location":"Installation/Android/Android/","text":"FTS Installation with Android FTS 1.6 supports Android deployment. The following instructions refers to a initial version (1.6.6), you install it at your own risk. This has been tested with Android 9, 10, 11 and Samsung S7, S8 and S9. download the APK installation package from github to your phone start the installation using Android open the configuration of the APP and allow storage rights: in the app icon, click on the info, scroll down to \"permission\", and allow storage. Failure to do so will stop the APP to work!!!! Start the the FTS app set your devices IP in the text box Set the slider to \"ON\" In the notifications you will see that FTS is running as a service in background Open your network connection and note your IP (e.g. 192.168.1.25) On a separate phone, open ATAK and create a new connection Set connection to TCP, to the previosly noted IP and port 15777 UI Setup FTS Android Edition has a minimal user interface, allowing to start and stop the FTS (including all the services). For advanced management you will need to install the web UI. since 1.6 you can now run the UI independently from the backend. THis allow you to install your web UI centrally and to manage several instances of FTS. install the UI with this command sudo python3 -m pip install FreeTAKServer-UI=0.1.6.5 to find where your UI is installed you run pip show FreeTAKServer-UI in [INSTALLPATH]/config.py set line 29 IP as device IP. e.g. REMEMBER THAT THIS IP MUST BE VISIBLE TO THE UI MACHINE # this IP will be used to connect with the FTS API IP = '192.168.1.25' start UI server sudo FLASK_APP=/usr/local/lib/python3.8/dist-packages/FreeTAKServer-UI/run.py python3 /usr/local/lib/python3.8/dist-packages/FreeTAKServer-UI/run.py Open a browser to [UIIP]:5000 login with default creds(admin, password) you can now controll your FTS Android Edition from this UI Troubleshooting if FTS crashes at the start, please check out the following ensure you have the following paths on your phone /FreeTAKServer/certs/ClientPackages /FreeTAKServer/logs ensure once again that storage permissions are enabled Notes Dynamic DP IP changing in UI currently isn't functional Federation as the server isn't functional, you can still connect your Android Edition instance as a client to another regular FTS. changes: runs now as a service UI improved with sliders and spy Icon added Splashscreen added","title":"FTS Installation with Android"},{"location":"Installation/Android/Android/#fts-installation-with-android","text":"FTS 1.6 supports Android deployment. The following instructions refers to a initial version (1.6.6), you install it at your own risk. This has been tested with Android 9, 10, 11 and Samsung S7, S8 and S9. download the APK installation package from github to your phone start the installation using Android open the configuration of the APP and allow storage rights: in the app icon, click on the info, scroll down to \"permission\", and allow storage. Failure to do so will stop the APP to work!!!! Start the the FTS app set your devices IP in the text box Set the slider to \"ON\" In the notifications you will see that FTS is running as a service in background Open your network connection and note your IP (e.g. 192.168.1.25) On a separate phone, open ATAK and create a new connection Set connection to TCP, to the previosly noted IP and port 15777","title":"FTS Installation with Android"},{"location":"Installation/Android/Android/#ui-setup","text":"FTS Android Edition has a minimal user interface, allowing to start and stop the FTS (including all the services). For advanced management you will need to install the web UI. since 1.6 you can now run the UI independently from the backend. THis allow you to install your web UI centrally and to manage several instances of FTS. install the UI with this command sudo python3 -m pip install FreeTAKServer-UI=0.1.6.5 to find where your UI is installed you run pip show FreeTAKServer-UI in [INSTALLPATH]/config.py set line 29 IP as device IP. e.g. REMEMBER THAT THIS IP MUST BE VISIBLE TO THE UI MACHINE # this IP will be used to connect with the FTS API IP = '192.168.1.25' start UI server sudo FLASK_APP=/usr/local/lib/python3.8/dist-packages/FreeTAKServer-UI/run.py python3 /usr/local/lib/python3.8/dist-packages/FreeTAKServer-UI/run.py Open a browser to [UIIP]:5000 login with default creds(admin, password) you can now controll your FTS Android Edition from this UI","title":"UI Setup"},{"location":"Installation/Android/Android/#troubleshooting","text":"if FTS crashes at the start, please check out the following ensure you have the following paths on your phone /FreeTAKServer/certs/ClientPackages /FreeTAKServer/logs ensure once again that storage permissions are enabled","title":"Troubleshooting"},{"location":"Installation/Android/Android/#notes","text":"Dynamic DP IP changing in UI currently isn't functional Federation as the server isn't functional, you can still connect your Android Edition instance as a client to another regular FTS.","title":"Notes"},{"location":"Installation/Android/Android/#changes","text":"runs now as a service UI improved with sliders and spy Icon added Splashscreen added","title":"changes:"},{"location":"Installation/Docker/","text":"Install The official Docker image for FreeTAKServer. Usage When using this docker container we suggested that you use the --restart unless-stopped flag as shown in the examples. This will enure that the service automatically starts with the host and will restart if it encounters an error and crashes. The port mappings in the examples are required to make the service accessable to hosts. All environment variables are optional. All data is stored in a single directory for ease of persistent data between container versions. docker volume create fts_data docker run -d -p 8080:8080/tcp -p 8087:8087/tcp -e FTS_CONNECTION_MESSAGE=\"Server Connection Message\" -e FTS_COT_TO_DB=\"True\" -v fts_data:/data --name fts --restart unless-stopped freetakteam/freetakserver:1.1.2 Alternatively, you can use the example docker-compose.yml available here by copying docker-compose.yml into a directory and then doing docker-compose up or docker-compose up -d to bring the container up, and in the background, respectively. The docker-compose.yml uses a bind mount to ./data . Ports The docker image runs the ports on the same defaults as FreeTAKServer. You can use the -e flag to map these ports to different ports or to run multiple FreeTAKServer's concurrently on the same host. Environment Variables All environment variables will apply to FTS. However, these are some additional ones specific to this docker image. APPPORT: Allows hosting FTS UI from a different port, if needed APIIP: Allows the FTS UI to specify a different API port, if needed. Will use the `IP` environment variable, if not specified APIPORT: Allows the FTS UI to specify a different API port, if needed APIPROTOCOL: Allows the FTS UI to specify a different API protocol, if needed WEBMAPIP: Allows the FTS UI to specify a different webmap IP, if needed WEBMAPPORT: Allows the FTS UI to specify a different webmap port, if needed WEBMAPPROTOCOL: Allows the FTS UI to specify a different webmap protocol, if needed Storage All data in this container is stored in /data . This directory will need to be stored to a volume if you wish to persist data between updates. If you use a storage volume you may need to run docker inspect fts_data to find where it saved the data. It will return something similar to this: root@fts:/home/ubuntu# docker inspect fts_data [ { \"CreatedAt\": \"2020-11-12T03:32:53Z\", \"Driver\": \"local\", \"Labels\": {}, \"Mountpoint\": \"/var/lib/docker/volumes/fts_data/_data\", \"Name\": \"fts_data\", \"Options\": {}, \"Scope\": \"local\" } ] The docker-compose.yml example utilizes a bind mount to ./data in the same directory. Additional Architectures Currently the container is being cross compiled for linux/amd64 , linux/arm64 and linux/arm/v7 . If additional processor architectures are needed please open an issue and request a new one. Docker Hub Page https://hub.docker.com/r/freetakteam/freetakserver","title":"Install"},{"location":"Installation/Docker/#install","text":"The official Docker image for FreeTAKServer.","title":"Install"},{"location":"Installation/Docker/#usage","text":"When using this docker container we suggested that you use the --restart unless-stopped flag as shown in the examples. This will enure that the service automatically starts with the host and will restart if it encounters an error and crashes. The port mappings in the examples are required to make the service accessable to hosts. All environment variables are optional. All data is stored in a single directory for ease of persistent data between container versions. docker volume create fts_data docker run -d -p 8080:8080/tcp -p 8087:8087/tcp -e FTS_CONNECTION_MESSAGE=\"Server Connection Message\" -e FTS_COT_TO_DB=\"True\" -v fts_data:/data --name fts --restart unless-stopped freetakteam/freetakserver:1.1.2 Alternatively, you can use the example docker-compose.yml available here by copying docker-compose.yml into a directory and then doing docker-compose up or docker-compose up -d to bring the container up, and in the background, respectively. The docker-compose.yml uses a bind mount to ./data .","title":"Usage"},{"location":"Installation/Docker/#ports","text":"The docker image runs the ports on the same defaults as FreeTAKServer. You can use the -e flag to map these ports to different ports or to run multiple FreeTAKServer's concurrently on the same host.","title":"Ports"},{"location":"Installation/Docker/#environment-variables","text":"All environment variables will apply to FTS. However, these are some additional ones specific to this docker image. APPPORT: Allows hosting FTS UI from a different port, if needed APIIP: Allows the FTS UI to specify a different API port, if needed. Will use the `IP` environment variable, if not specified APIPORT: Allows the FTS UI to specify a different API port, if needed APIPROTOCOL: Allows the FTS UI to specify a different API protocol, if needed WEBMAPIP: Allows the FTS UI to specify a different webmap IP, if needed WEBMAPPORT: Allows the FTS UI to specify a different webmap port, if needed WEBMAPPROTOCOL: Allows the FTS UI to specify a different webmap protocol, if needed","title":"Environment Variables"},{"location":"Installation/Docker/#storage","text":"All data in this container is stored in /data . This directory will need to be stored to a volume if you wish to persist data between updates. If you use a storage volume you may need to run docker inspect fts_data to find where it saved the data. It will return something similar to this: root@fts:/home/ubuntu# docker inspect fts_data [ { \"CreatedAt\": \"2020-11-12T03:32:53Z\", \"Driver\": \"local\", \"Labels\": {}, \"Mountpoint\": \"/var/lib/docker/volumes/fts_data/_data\", \"Name\": \"fts_data\", \"Options\": {}, \"Scope\": \"local\" } ] The docker-compose.yml example utilizes a bind mount to ./data in the same directory.","title":"Storage"},{"location":"Installation/Docker/#additional-architectures","text":"Currently the container is being cross compiled for linux/amd64 , linux/arm64 and linux/arm/v7 . If additional processor architectures are needed please open an issue and request a new one.","title":"Additional Architectures"},{"location":"Installation/Docker/#docker-hub-page","text":"https://hub.docker.com/r/freetakteam/freetakserver","title":"Docker Hub Page"},{"location":"Installation/Docker/CLI/","text":"CLI Access Accessing the CLI With the docker container isolating the running instance you also need to use docker to access the cli. docker exec -it fts python3 -m FreeTAKServer.views.CLI This will open a CLI instance attached to the process running in the container. With the CLI open in your terminal you can view supported commands by running help","title":"CLI"},{"location":"Installation/Docker/CLI/#cli-access","text":"","title":"CLI Access"},{"location":"Installation/Docker/CLI/#accessing-the-cli","text":"With the docker container isolating the running instance you also need to use docker to access the cli. docker exec -it fts python3 -m FreeTAKServer.views.CLI This will open a CLI instance attached to the process running in the container. With the CLI open in your terminal you can view supported commands by running help","title":"Accessing the CLI"},{"location":"Installation/Docker/Debian/","text":"Debian This is assuming a fresh installation of Debian 10. Install Docker sudo apt-get install curl curl https://releases.rancher.com/install-docker/19.03.sh | sh Or follow the docker installation guide. https://docs.docker.com/engine/install/debian/ Run the Container docker volume create fts_data docker run -d -p 8080:8080/tcp -p 8087:8087/tcp -e FTS_CONNECTION_MESSAGE=\"Server Connection Message\" -e FTS_SAVE_COT_TO_DB=\"True\" -v fts_data:/host/system/folder --name fts --restart unless-stopped freetakteam/freetakserver:1.1.2 Alternatively, you can use the example docker-compose.yml available here by copying docker-compose.yml into a directory and then doing docker-compose up or docker-compose up -d to bring the container up, and in the background, respectively. The docker-compose.yml uses a bind mount to ./data .","title":"Debian"},{"location":"Installation/Docker/Debian/#debian","text":"This is assuming a fresh installation of Debian 10.","title":"Debian"},{"location":"Installation/Docker/Debian/#install-docker","text":"sudo apt-get install curl curl https://releases.rancher.com/install-docker/19.03.sh | sh Or follow the docker installation guide. https://docs.docker.com/engine/install/debian/","title":"Install Docker"},{"location":"Installation/Docker/Debian/#run-the-container","text":"docker volume create fts_data docker run -d -p 8080:8080/tcp -p 8087:8087/tcp -e FTS_CONNECTION_MESSAGE=\"Server Connection Message\" -e FTS_SAVE_COT_TO_DB=\"True\" -v fts_data:/host/system/folder --name fts --restart unless-stopped freetakteam/freetakserver:1.1.2 Alternatively, you can use the example docker-compose.yml available here by copying docker-compose.yml into a directory and then doing docker-compose up or docker-compose up -d to bring the container up, and in the background, respectively. The docker-compose.yml uses a bind mount to ./data .","title":"Run the Container"},{"location":"Installation/Docker/Quick%20Start%20Guide/","text":"This will run FreeTAKServer without persistent data storage with all default settings. docker run -d -p 8080:8080/tcp -p 8087:8087/tcp --name fts --restart unless-stopped freetakteam/freetakserver:1.1.2 Persistent Data All persistent data is stored to /data and may be volume mounted. The host volume needs to be owned by user and group 1000. docker volume create fts_data docker run -d -p 8080:8080/tcp -p 8087:8087/tcp -e FTS_CONNECTION_MESSAGE=\"Server Connection Message\" -e FTS_SAVE_COT_TO_DB=\"True\" -v fts_data:/host/system/folder --name fts --restart unless-stopped freetakteam/freetakserver:1.1.2 It is also possible to use an absolute path with a blind mount on the host instead of a proper volume. For more information about volumes https://docs.docker.com/storage/volumes/ Alternatively, you can use the example docker-compose.yml available here by copying docker-compose.yml into a directory and then doing docker-compose up or docker-compose up -d to bring the container up, and in the background, respectively. The docker-compose.yml uses a bind mount to ./data .","title":"Quick Start Guide"},{"location":"Installation/Docker/Quick%20Start%20Guide/#persistent-data","text":"All persistent data is stored to /data and may be volume mounted. The host volume needs to be owned by user and group 1000. docker volume create fts_data docker run -d -p 8080:8080/tcp -p 8087:8087/tcp -e FTS_CONNECTION_MESSAGE=\"Server Connection Message\" -e FTS_SAVE_COT_TO_DB=\"True\" -v fts_data:/host/system/folder --name fts --restart unless-stopped freetakteam/freetakserver:1.1.2 It is also possible to use an absolute path with a blind mount on the host instead of a proper volume. For more information about volumes https://docs.docker.com/storage/volumes/ Alternatively, you can use the example docker-compose.yml available here by copying docker-compose.yml into a directory and then doing docker-compose up or docker-compose up -d to bring the container up, and in the background, respectively. The docker-compose.yml uses a bind mount to ./data .","title":"Persistent Data"},{"location":"Installation/Docker/Raspberry%20Pi/","text":"Raspberry Pi 4/Raspberry Pi 3 It is recommended to use a Raspberry Pi 4 with 4GB or 8GB of ram. This guide assumes that you have a clean install of Raspberry Pi OS or Raspbian. You may also use the 64 bit Ubuntu 20.04 server prepared for the Raspberry Pi 4. Install Docker sudo apt-get update && sudo apt-get upgrade sudo apt-get install curl curl -fsSL https://get.docker.com -o get-docker.sh sudo sh get-docker.sh Run the Container docker volume create fts_data docker run -d -p 8080:8080/tcp -p 8087:8087/tcp -e FTS_CONNECTION_MESSAGE=\"Server Connection Message\" -e FTS_SAVE_COT_TO_DB=\"True\" -v fts_data:/host/system/folder --name fts --restart unless-stopped freetakteam/freetakserver:1.1.2 Alternatively, you can use the example docker-compose.yml available here by copying docker-compose.yml into a directory and then doing docker-compose up or docker-compose up -d to bring the container up, and in the background, respectively. The docker-compose.yml uses a bind mount to ./data . Older Pi's Raspberry Pi's prior to the Pi3 have not been tested, and would not be recommended for use.","title":"Raspberry Pi 4/Raspberry Pi 3"},{"location":"Installation/Docker/Raspberry%20Pi/#raspberry-pi-4raspberry-pi-3","text":"It is recommended to use a Raspberry Pi 4 with 4GB or 8GB of ram. This guide assumes that you have a clean install of Raspberry Pi OS or Raspbian. You may also use the 64 bit Ubuntu 20.04 server prepared for the Raspberry Pi 4.","title":"Raspberry Pi 4/Raspberry Pi 3"},{"location":"Installation/Docker/Raspberry%20Pi/#install-docker","text":"sudo apt-get update && sudo apt-get upgrade sudo apt-get install curl curl -fsSL https://get.docker.com -o get-docker.sh sudo sh get-docker.sh","title":"Install Docker"},{"location":"Installation/Docker/Raspberry%20Pi/#run-the-container","text":"docker volume create fts_data docker run -d -p 8080:8080/tcp -p 8087:8087/tcp -e FTS_CONNECTION_MESSAGE=\"Server Connection Message\" -e FTS_SAVE_COT_TO_DB=\"True\" -v fts_data:/host/system/folder --name fts --restart unless-stopped freetakteam/freetakserver:1.1.2 Alternatively, you can use the example docker-compose.yml available here by copying docker-compose.yml into a directory and then doing docker-compose up or docker-compose up -d to bring the container up, and in the background, respectively. The docker-compose.yml uses a bind mount to ./data .","title":"Run the Container"},{"location":"Installation/Docker/Raspberry%20Pi/#older-pis","text":"Raspberry Pi's prior to the Pi3 have not been tested, and would not be recommended for use.","title":"Older Pi's"},{"location":"Installation/Docker/Multiple%20Servers/multiple/","text":"Multiple Servers on Single Host It is possible to run FreeTakServer multiple times on a single host by changing the port numbers. If you follow an installation guide for your target platform and have a container running named fts using the default ports, this will explain how to run a second server on non default ports. Limitations Currently due to a bug in the ATAK client you will need to share packages across all FTS servers on the same host. The additional servers will use the first server, using the default port of 8080 for data packages. Running an aditional container docker volume create fts_data2 docker run -d -p 8088:8087/tcp -e FTS_CONNECTION_MESSAGE=\"Server 2\" -e FTS_SAVE_COT_TO_DB=\"True\" -v fts_data2:/host/system/folder --name fts2 --restart unless-stopped freetakteam/freetakserver:1.1.2 We can use this command as a template to run as many FTS server instances as we would like on a single host by changing the name of the container and the ports FTS is running on. So long as we avoid collisions on ports and names, if we have the resources we can run multiple servers with ease.","title":"Multiple Servers on Single Host"},{"location":"Installation/Docker/Multiple%20Servers/multiple/#multiple-servers-on-single-host","text":"It is possible to run FreeTakServer multiple times on a single host by changing the port numbers. If you follow an installation guide for your target platform and have a container running named fts using the default ports, this will explain how to run a second server on non default ports.","title":"Multiple Servers on Single Host"},{"location":"Installation/Docker/Multiple%20Servers/multiple/#limitations","text":"Currently due to a bug in the ATAK client you will need to share packages across all FTS servers on the same host. The additional servers will use the first server, using the default port of 8080 for data packages.","title":"Limitations"},{"location":"Installation/Docker/Multiple%20Servers/multiple/#running-an-aditional-container","text":"docker volume create fts_data2 docker run -d -p 8088:8087/tcp -e FTS_CONNECTION_MESSAGE=\"Server 2\" -e FTS_SAVE_COT_TO_DB=\"True\" -v fts_data2:/host/system/folder --name fts2 --restart unless-stopped freetakteam/freetakserver:1.1.2 We can use this command as a template to run as many FTS server instances as we would like on a single host by changing the name of the container and the ports FTS is running on. So long as we avoid collisions on ports and names, if we have the resources we can run multiple servers with ease.","title":"Running an aditional container"},{"location":"Installation/Docker/Upgrade/Upgrade/","text":"Upgrading Existing Container To upgrade the container to a new version you simply stop the container running the version you wish to upgrade from, and start a container running the version you want to upgrade to. To have data transfered between versions you need to have used a volume during the initial set up. docker stop fts docker rm fts docker run -d -p 8080:8080/tcp -p 8087:8087/tcp -e FTS_CONNECTION_MESSAGE=\"Server Connection Message\" -e FTS_SAVE_COT_TO_DB=\"True\" -v fts_data:/data --name fts --restart unless-stopped freetakteam/freetakserver:{New FTS version} If using the docker-compose.yml file, perform the following: docker-compose pull docker-compose down docker-compose up # alternatively, use docker-compose up -d to run in the background","title":"Upgrading Existing Container"},{"location":"Installation/Docker/Upgrade/Upgrade/#upgrading-existing-container","text":"To upgrade the container to a new version you simply stop the container running the version you wish to upgrade from, and start a container running the version you want to upgrade to. To have data transfered between versions you need to have used a volume during the initial set up. docker stop fts docker rm fts docker run -d -p 8080:8080/tcp -p 8087:8087/tcp -e FTS_CONNECTION_MESSAGE=\"Server Connection Message\" -e FTS_SAVE_COT_TO_DB=\"True\" -v fts_data:/data --name fts --restart unless-stopped freetakteam/freetakserver:{New FTS version} If using the docker-compose.yml file, perform the following: docker-compose pull docker-compose down docker-compose up # alternatively, use docker-compose up -d to run in the background","title":"Upgrading Existing Container"},{"location":"Installation/PyPi/Linux/Install/","text":"This guide will walk you through installing FreeTAKServer 1.9 on a Linux host Linux Distribution It is suggested to use Ubuntu 20.04 or Debian 10 or Raspberry PI OS. Install Python 3 sudo apt update && sudo apt install python3 && sudo apt install python3-pip Install Python Libraries OPTIONAL this should not be necessary using FTS 1.9 sudo apt install python3-dev python3-setuptools build-essential python3-gevent python3-lxml libcairo2-dev Install 'wheel' and 'pycairo' OPTIONAL this should not be necessary using FTS 1.5 sudo pip3 install wheel pycairo delete previous installation required. Upgrade will not work. sudo pip3 uninstall FreeTAKServer sudo pip3 uninstall FreeTAKServer-UI Delete the database sudo rm /root/FTSDataBase.db and the various logs folders sudo rm -r /usr/local/lib/python3.8/dist-packages/FreeTAKServer Install FreeTAKServer Install the FTS and the Web UI (suggested) sudo python3 -m pip install FreeTAKServer[ui] in alternative Install the FTS only sudo python3 -m pip install FreeTAKServer check your install pip check FreeTakServer Install an old version you can install a past version using this command sudo python3 -m pip install FreeTAKServer[ui]==[VERSIONNUMBER] Configure and Run FTS 1.9 + start FTS sudo python3 -m FreeTAKServer.controllers.services.FTS the first time a wizard will popup would you like to use a yaml config file, if yes you will be prompted for further configuration options [yes]: yes ``` type yes where would you like to save the yaml config [/opt/FTSConfig.yaml]: from now on, hit ENTER if you are happy with the default ```` enter ip [10.0.2.15]: 10.0.2.15 ```` this is the FTS_MAIN_IP, must be you EXTERNAL IP continue to follow the instructions: enter the preferred database path [/opt/FTSDataBase.db]: /opt/FTSDataBase.db next one is important, adjust the path to your Python install enter the preferred main_path [/usr/local/lib/python3.8/dist-packages/FreeTAKServer]: /usr/local/lib/python3.8/dist-packages/FreeTAKServer enter the preferred log file path [/usr/local/lib/python3.8/dist-packages/FreeTAKServer/Logs]: /usr/local/lib/python3.8/dist-packages/FreeTAKServer/Logs at this point a YAML file is created under the location you selected (default is /opt/FTSConfig.yaml). FTS will start all the services. ### Configure FreeTAKServer > 1.9 ![image](https://user-images.githubusercontent.com/60719165/124500136-9aafa500-dd95-11eb-8aa8-67ffda7076f0.png) Depending on the linux distro your config file for FTS will be in a python version dependant location. you can use pip to discover the location. Type: python3 -m pip show FreeTAKServer If you are running python 3.7 you would get /usr/local/lib/python3.7/dist-packages/FreeTAKServer/controllers/configuration/MainConfig.py similarly, If you are running python 3.8 /usr/local/lib/python3.8/dist-packages/FreeTAKServer/controllers/configuration/MainConfig.py You can edit the file via nano with the following command sudo nano /usr/local/lib/python3.7/dist-packages/FreeTAKServer/controllers/configuration/MainConfig.py To exit nano `ctrl+x` and then enter `y` to save and hit enter. #### DBFilePath OPTIONAL this should not be necessary since FTS 1.5 you need to change the `DBFilePath` value to something valid, if you are running as root, '/root' is a good choice. Original Value ```python # this should be set before startup DBFilePath = str(r'/opt/FTSDataBase.db') As roots Home Folder # this should be set before startup DBFilePath = str(r'/root/FTSDataBase.db') MySQL database FTS supports an abstraction layer, so it's easy to use a different database like MySQL. MYSQL is still experimental support, so use at your own risk. To switch to a MySQL database # this should be set before startup DBFilePath = str('user:pass@localhost/dbname') And then under sudo nano /usr/local/lib/python3.7/dist-packages/FreeTAKServer/controllers/configuration/DatabaseConfiguration.py Change DataBaseType = str('sqlite:///') To DataBaseType = str('mysql://') Configure Web UI the Web UI is an optional component, however it's required to properly control FTS. Its configuration can be found under /[INSTALLATIONPATH]/FreeTAKServer-UI/config.py SQLALCHEMY_DATABASE_URI = 'sqlite:///' + '/root/FTSDataBase.db' To use a MySQL database change the above line as follows SQLALCHEMY_DATABASE_URI = 'mysql://' + 'user:pass@localhost/dbname' set the IP to your external IP IP = '127.0.0.1' the port the UI uses to communicate with the backend PORT = '19023' the API key used by the UI to comunicate with FTS. generate a new system user and then set it app.config['APIKEY'] = 'Bearer [API_TOKEN]' the webSocket key used by the UI to comunicate with FTS. must be the same value specified in the FTS config. app.config['WEBSOCKETKEY'] = '[Your_Web_socket_Key]' Test FTS Let's make sure your FTS server can start and run without errors. sudo python3 -m FreeTAKServer.controllers.services.FTS If you see FTS start without error you may hit ctrl+c twice and move onto running FTS.","title":"Install"},{"location":"Installation/PyPi/Linux/Install/#linux-distribution","text":"It is suggested to use Ubuntu 20.04 or Debian 10 or Raspberry PI OS.","title":"Linux Distribution"},{"location":"Installation/PyPi/Linux/Install/#install-python-3","text":"sudo apt update && sudo apt install python3 && sudo apt install python3-pip","title":"Install Python 3"},{"location":"Installation/PyPi/Linux/Install/#install-python-libraries","text":"OPTIONAL this should not be necessary using FTS 1.9 sudo apt install python3-dev python3-setuptools build-essential python3-gevent python3-lxml libcairo2-dev","title":"Install Python Libraries"},{"location":"Installation/PyPi/Linux/Install/#install-wheel-and-pycairo","text":"OPTIONAL this should not be necessary using FTS 1.5 sudo pip3 install wheel pycairo","title":"Install 'wheel' and 'pycairo'"},{"location":"Installation/PyPi/Linux/Install/#delete-previous-installation","text":"required. Upgrade will not work. sudo pip3 uninstall FreeTAKServer sudo pip3 uninstall FreeTAKServer-UI Delete the database sudo rm /root/FTSDataBase.db and the various logs folders sudo rm -r /usr/local/lib/python3.8/dist-packages/FreeTAKServer","title":"delete previous installation"},{"location":"Installation/PyPi/Linux/Install/#install-freetakserver","text":"Install the FTS and the Web UI (suggested) sudo python3 -m pip install FreeTAKServer[ui] in alternative Install the FTS only sudo python3 -m pip install FreeTAKServer check your install pip check FreeTakServer","title":"Install FreeTAKServer"},{"location":"Installation/PyPi/Linux/Install/#install-an-old-version","text":"you can install a past version using this command sudo python3 -m pip install FreeTAKServer[ui]==[VERSIONNUMBER]","title":"Install an old version"},{"location":"Installation/PyPi/Linux/Install/#configure-and-run-fts-19","text":"start FTS sudo python3 -m FreeTAKServer.controllers.services.FTS the first time a wizard will popup would you like to use a yaml config file, if yes you will be prompted for further configuration options [yes]: yes ``` type yes where would you like to save the yaml config [/opt/FTSConfig.yaml]: from now on, hit ENTER if you are happy with the default ```` enter ip [10.0.2.15]: 10.0.2.15 ```` this is the FTS_MAIN_IP, must be you EXTERNAL IP continue to follow the instructions: enter the preferred database path [/opt/FTSDataBase.db]: /opt/FTSDataBase.db next one is important, adjust the path to your Python install enter the preferred main_path [/usr/local/lib/python3.8/dist-packages/FreeTAKServer]: /usr/local/lib/python3.8/dist-packages/FreeTAKServer enter the preferred log file path [/usr/local/lib/python3.8/dist-packages/FreeTAKServer/Logs]: /usr/local/lib/python3.8/dist-packages/FreeTAKServer/Logs at this point a YAML file is created under the location you selected (default is /opt/FTSConfig.yaml). FTS will start all the services. ### Configure FreeTAKServer > 1.9 ![image](https://user-images.githubusercontent.com/60719165/124500136-9aafa500-dd95-11eb-8aa8-67ffda7076f0.png) Depending on the linux distro your config file for FTS will be in a python version dependant location. you can use pip to discover the location. Type: python3 -m pip show FreeTAKServer If you are running python 3.7 you would get /usr/local/lib/python3.7/dist-packages/FreeTAKServer/controllers/configuration/MainConfig.py similarly, If you are running python 3.8 /usr/local/lib/python3.8/dist-packages/FreeTAKServer/controllers/configuration/MainConfig.py You can edit the file via nano with the following command sudo nano /usr/local/lib/python3.7/dist-packages/FreeTAKServer/controllers/configuration/MainConfig.py To exit nano `ctrl+x` and then enter `y` to save and hit enter. #### DBFilePath OPTIONAL this should not be necessary since FTS 1.5 you need to change the `DBFilePath` value to something valid, if you are running as root, '/root' is a good choice. Original Value ```python # this should be set before startup DBFilePath = str(r'/opt/FTSDataBase.db') As roots Home Folder # this should be set before startup DBFilePath = str(r'/root/FTSDataBase.db')","title":"Configure and Run FTS 1.9 +"},{"location":"Installation/PyPi/Linux/Install/#mysql-database","text":"FTS supports an abstraction layer, so it's easy to use a different database like MySQL. MYSQL is still experimental support, so use at your own risk. To switch to a MySQL database # this should be set before startup DBFilePath = str('user:pass@localhost/dbname') And then under sudo nano /usr/local/lib/python3.7/dist-packages/FreeTAKServer/controllers/configuration/DatabaseConfiguration.py Change DataBaseType = str('sqlite:///') To DataBaseType = str('mysql://')","title":"MySQL database"},{"location":"Installation/PyPi/Linux/Install/#configure-web-ui","text":"the Web UI is an optional component, however it's required to properly control FTS. Its configuration can be found under /[INSTALLATIONPATH]/FreeTAKServer-UI/config.py SQLALCHEMY_DATABASE_URI = 'sqlite:///' + '/root/FTSDataBase.db' To use a MySQL database change the above line as follows SQLALCHEMY_DATABASE_URI = 'mysql://' + 'user:pass@localhost/dbname' set the IP to your external IP IP = '127.0.0.1' the port the UI uses to communicate with the backend PORT = '19023' the API key used by the UI to comunicate with FTS. generate a new system user and then set it app.config['APIKEY'] = 'Bearer [API_TOKEN]' the webSocket key used by the UI to comunicate with FTS. must be the same value specified in the FTS config. app.config['WEBSOCKETKEY'] = '[Your_Web_socket_Key]'","title":"Configure Web UI"},{"location":"Installation/PyPi/Linux/Install/#test-fts","text":"Let's make sure your FTS server can start and run without errors. sudo python3 -m FreeTAKServer.controllers.services.FTS If you see FTS start without error you may hit ctrl+c twice and move onto running FTS.","title":"Test FTS"},{"location":"Installation/PyPi/Linux/Running/","text":"If you have not installed FreeTAKServer please follow the installation guide first. Parameters Flag Default Description -AutoStart Weather the full server start or just the RestAPI, must be True or False -CoTIP Your Server IP -CoTPort 8087 The port you want clients to connect to -SSLCoTIP Your SSL Server IP -SSLCoTPort 8089 The port you want SSL clients to connect to -DataPackageIP 0.0.0.0 The IP where data packages are served from -DataPackagePort 8080 The port you want Data Packages to be sent and received on -SSLDataPackageIP 0.0.0.0 The IP where data SSL packages are served from -SSLDataPackagePort 8443 The port you want SSL Data Packages to be sent and received on Run FTS in the Console sudo python3 -m FreeTAKServer.controllers.services.FTS -DataPackageIP 0.0.0.0 -AutoStart True If you have FTS running in the terminal how you would like it's time to move on to running FTS as a service.","title":"Running"},{"location":"Installation/PyPi/Linux/Running/#parameters","text":"Flag Default Description -AutoStart Weather the full server start or just the RestAPI, must be True or False -CoTIP Your Server IP -CoTPort 8087 The port you want clients to connect to -SSLCoTIP Your SSL Server IP -SSLCoTPort 8089 The port you want SSL clients to connect to -DataPackageIP 0.0.0.0 The IP where data packages are served from -DataPackagePort 8080 The port you want Data Packages to be sent and received on -SSLDataPackageIP 0.0.0.0 The IP where data SSL packages are served from -SSLDataPackagePort 8443 The port you want SSL Data Packages to be sent and received on","title":"Parameters"},{"location":"Installation/PyPi/Linux/Running/#run-fts-in-the-console","text":"sudo python3 -m FreeTAKServer.controllers.services.FTS -DataPackageIP 0.0.0.0 -AutoStart True If you have FTS running in the terminal how you would like it's time to move on to running FTS as a service.","title":"Run FTS in the Console"},{"location":"Installation/PyPi/Linux/Service/","text":"Running FreeTAKServer as a service on your linux server can be achieved multiple ways. Cron Cron or Crontab is a basic scheduler that ships with most linux distributions. We can use this to get a very basic service running with minimal effort. Edit Crontab sudo crontab -e Add this line to the bottom of the file @reboot nohup sudo python3 -m FreeTAKServer.controllers.services.FTS & You will need to add any start parameters to the crontab file such as -DataPackageIP . Systemd Introduction Systemd is nearly unavoidable. It has permiated so many aspects of the Linux ecosystem that it's necessary for any Linux admin to know at least the basics of how it works. One of the major selling points of systemd is the ease of writing service files. They aren't scripts. Instead, they're basic configuration files. While they can grow to be complex, they are usually very simple. Create The File Systemd services exist at /etc/systemd/system. If you look on your system, they're all there. Any .service file that you create in that directory can be run as a service, if you construct it properly. Create a file that you would like with the .service extension. In our case, create a file as /etc/systemd/system/FreeTAKServer.service with the following content: (modify the parameters as needed) [Unit] Description=FreeTAK Server service After=network.target StartLimitIntervalSec=0 [Service] Type=simple Restart=always RestartSec=1 ExecStart=/usr/bin/python3 -m FreeTAKServer.controllers.services.FTS -DataPackageIP 0.0.0.0 -AutoStart True [Install] WantedBy=multi-user.target And reload systemd so it will load new unit file: systemd daemon-reload Start the FreeTAKServer.service systemctl start FreeTAKServer.service Get the Status of the FreeTAKServer.service systemctl status FreeTAKServer.service Stop the FreeTAKServer.service systemctl stop FreeTAKServer.service Start the FreeTAKServer.service with the system systemctl enable FreeTAKServer.service","title":"Service"},{"location":"Installation/PyPi/Linux/Service/#cron","text":"Cron or Crontab is a basic scheduler that ships with most linux distributions. We can use this to get a very basic service running with minimal effort.","title":"Cron"},{"location":"Installation/PyPi/Linux/Service/#edit-crontab","text":"sudo crontab -e Add this line to the bottom of the file @reboot nohup sudo python3 -m FreeTAKServer.controllers.services.FTS & You will need to add any start parameters to the crontab file such as -DataPackageIP .","title":"Edit Crontab"},{"location":"Installation/PyPi/Linux/Service/#systemd","text":"","title":"Systemd"},{"location":"Installation/PyPi/Linux/Service/#introduction","text":"Systemd is nearly unavoidable. It has permiated so many aspects of the Linux ecosystem that it's necessary for any Linux admin to know at least the basics of how it works. One of the major selling points of systemd is the ease of writing service files. They aren't scripts. Instead, they're basic configuration files. While they can grow to be complex, they are usually very simple.","title":"Introduction"},{"location":"Installation/PyPi/Linux/Service/#create-the-file","text":"Systemd services exist at /etc/systemd/system. If you look on your system, they're all there. Any .service file that you create in that directory can be run as a service, if you construct it properly. Create a file that you would like with the .service extension. In our case, create a file as /etc/systemd/system/FreeTAKServer.service with the following content: (modify the parameters as needed) [Unit] Description=FreeTAK Server service After=network.target StartLimitIntervalSec=0 [Service] Type=simple Restart=always RestartSec=1 ExecStart=/usr/bin/python3 -m FreeTAKServer.controllers.services.FTS -DataPackageIP 0.0.0.0 -AutoStart True [Install] WantedBy=multi-user.target And reload systemd so it will load new unit file: systemd daemon-reload","title":"Create The File"},{"location":"Installation/PyPi/Linux/Service/#start-the-freetakserverservice","text":"systemctl start FreeTAKServer.service","title":"Start the FreeTAKServer.service"},{"location":"Installation/PyPi/Linux/Service/#get-the-status-of-the-freetakserverservice","text":"systemctl status FreeTAKServer.service","title":"Get the Status of the FreeTAKServer.service"},{"location":"Installation/PyPi/Linux/Service/#stop-the-freetakserverservice","text":"systemctl stop FreeTAKServer.service","title":"Stop the FreeTAKServer.service"},{"location":"Installation/PyPi/Linux/Service/#start-the-freetakserverservice-with-the-system","text":"systemctl enable FreeTAKServer.service","title":"Start the FreeTAKServer.service with the system"},{"location":"Installation/Troubleshooting/troubleshooting/","text":"Troubleshooting package not found' if, trying to start FTS you get an error 'package not found' 'package not found' navigate to the physical location where the controllers are installed and start the server from there. You may also check for missing libraries and install then using pip issue connecting in WinTAK if you have issues connecting winTAK to FTS, try to deactivate the TAKChat plugin, under the plugin section client2client datapackages If you have issues sending datapackages directly to clients via FTS, make sure the -IP argument you specified can be reached from your device. A quick way to test if it works is to take a picture with Quick Pic in ATAK and send it to another client. Please also note that for that test ATAK clients needs to be on different network (ie one on mobile and one on wifi), because if you run them in same network (wifi, vpn, etc) they will just use same multicast group, bypassing FTS completely. When you post package to specific contact in ATAK, following happens: 1) Datapackage is uploaded to server, recorded in database and stored in FTS directory 2) Client receives payload with URL pointing to datapackage so ATAK can download it Assuming you want to run open-to-everyone FTS instance, and you have server hosted somewhere, you need to specify public IP address in -IP argument. And just in case, -IP also accepts domain names. If you run it at home and port forward on router doesn't work, check if you receive actual IP address and not being NATed and ports 8080 and 8087 are not filtered - you can ask your ISP about that.","title":"Troubleshooting"},{"location":"Installation/Troubleshooting/troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"Installation/Troubleshooting/troubleshooting/#package-not-found","text":"if, trying to start FTS you get an error 'package not found' 'package not found' navigate to the physical location where the controllers are installed and start the server from there. You may also check for missing libraries and install then using pip","title":"package not found'"},{"location":"Installation/Troubleshooting/troubleshooting/#issue-connecting-in-wintak","text":"if you have issues connecting winTAK to FTS, try to deactivate the TAKChat plugin, under the plugin section","title":"issue connecting in WinTAK"},{"location":"Installation/Troubleshooting/troubleshooting/#client2client-datapackages","text":"If you have issues sending datapackages directly to clients via FTS, make sure the -IP argument you specified can be reached from your device. A quick way to test if it works is to take a picture with Quick Pic in ATAK and send it to another client. Please also note that for that test ATAK clients needs to be on different network (ie one on mobile and one on wifi), because if you run them in same network (wifi, vpn, etc) they will just use same multicast group, bypassing FTS completely. When you post package to specific contact in ATAK, following happens: 1) Datapackage is uploaded to server, recorded in database and stored in FTS directory 2) Client receives payload with URL pointing to datapackage so ATAK can download it Assuming you want to run open-to-everyone FTS instance, and you have server hosted somewhere, you need to specify public IP address in -IP argument. And just in case, -IP also accepts domain names. If you run it at home and port forward on router doesn't work, check if you receive actual IP address and not being NATed and ports 8080 and 8087 are not filtered - you can ask your ISP about that.","title":"client2client datapackages"},{"location":"Installation/Windows/FreeTAKServer_Windows_Install/","text":"FreeTAKServer Install On Windows Computer Below is the installation commands and comments for the installation of FreeTAKServer on a windows computer. Please notcie, the FTS team is not supporting Windows as an official OS for FTS. please contact the original authors FreeTAKServer Manager For Windows FreeTAKServer Manager has the ability to Start, Stop, Restart, Install and Uninstall the FreeTAKServer & FreeTAKServer-UI. release version 1.5.12 FreeTAKServer provides Situational Awareness and other capabilities such as: sci-fi themed Web Administration SSL Encryption Management Health Monitor Dynamically change IP / ports, start, stop FTS services from web UI Service management Federation Service (Connecting two or more FTS or TAK server instances) Data Package upload and retrieval Private data package (user to user) Image transfer and storage COT recording in a database Execution of common task list (using the ExCheck plugin for WinTAK; ATAK plugin only available to users with takmaps.com access) User Management Command Line Interface REST API for creation of information such as emergency, Enemy units and so on the preferred way to install FTS is by using Pip, that would solve all the required dependencies. the offline release requires additional manual work and has to be used only in the cases where internet connection is not available. Install Instructions Install python from python.org Download and run the installer https://www.python.org/downloads/windows/ Choose the installer option. Check pip, tcl/tk and IDLE and the Python test suite. Make sure you add Python to environment variables for easy use. Now check that python and pip are installed and working correctly. You should be able to open cmd anywhere and do this check : > python -V > pip --version Once you have checked that Python and pip are working install the requirements: > pip install flask > pip install flask_login > pip install flask_migrate > pip install flask_wtf > pip install flask_sqlalchemy > pip install email_validator > pip install gunicorn > pip install coveralls > pip install coverage > pip install pytest > pip install flake8 > pip install flake8-print > pip install pep8-naming > pip install selenium When all the requirements have been satisfied install the FreeTAKServer > python -m pip install FreeTAKServer[ui] After the installation has finished open the MainConfig.py file for editing. The contents must be changed fo that the Windows paths can communicate with FTS MY PATH EXAMPLE C:\\Software\\python\\Lib\\site-packages\\FreeTAKServer\\controllers\\configuration\\MainConfig.py Edited contents for windows machines: import os currentPath = os.path.dirname(os.path.abspath(__file__)) from pathlib import Path class MainConfig: \"\"\" this is the main configuration file and is the only one which should need to be changed \"\"\" # this is the port to which clients will connect CoTServicePort = int(8087) SSLCoTServicePort = int(8089) # this needs to be changed for private data packages to work DataPackageServiceDefaultIP = str(\"0.0.0.0\") # User Connection package IP needs to be set to the IP which is used when creating the connection in your tak device UserConnectionIP = str(\"0.0.0.0\") #python_version = 'python3.8' #userpath = '/usr/local/lib/' # api port APIPort = 19023 # Federation port FederationPort = 9000 # api IP APIIP = '0.0.0.0' # allowed ip's to access CLI commands AllowedCLIIPs = ['127.0.0.1'] # IP for CLI to access CLIIP = '127.0.0.1' # whether or not to save CoT's to the DB SaveCoTToDB = bool(True) # this should be set before startup DBFilePath = str(r'C:\\\\Software\\\\python\\\\Lib\\\\site-packages\\\\FreeTAKServer\\\\FTSDataBase.db') # the version information of the server (recommended to leave as default) version = 'FreeTAKServer-1.5.12 RC1' MainPath = str(Path(fr'C:\\\\Software\\\\python\\\\Lib\\\\site-packages\\\\FreeTAKServer')) ExCheckMainPath = str(Path(fr'{MainPath}\\\\ExCheck')) ExCheckFilePath = str(Path(fr'{MainPath}\\\\ExCheck\\\\template')) ExCheckChecklistFilePath = str(Path(fr'{MainPath}\\\\ExCheck\\\\checklist')) DataPackageFilePath = str(Path(fr'{MainPath}\\\\FreeTAKServerDataPackageFolder')) # format of API message header should be {Authentication: Bearer 'TOKEN'} from uuid import uuid4 id = str(uuid4()) nodeID = f\"FreeTAKServer-{id}\" # set to None if you don't want a message sent ConnectionMessage = f'Welcome to FreeTAKServer {version}. The Parrot is not dead. It\u2019s just resting' keyDir = str(Path(fr'{MainPath}\\\\certs\\\\pubserver.key')) pemDir = str(Path(fr'{MainPath}\\\\certs\\\\pubserver.pem')) # or crt unencryptedKey = str(Path(fr'{MainPath}\\\\certs\\\\pubserver.key.unencrypted')) p12Dir = str(Path(fr'{MainPath}\\\\certs\\\\pubserver.p12')) CA = str(Path(fr'{MainPath}\\\\certs\\\\ca.pem')) CAkey = str(Path(fr'{MainPath}\\\\certs\\\\ca.key')) federationCert = str(Path(fr'{MainPath}\\\\certs\\\\pubserver.pem')) federationKey = str(Path(fr'{MainPath}\\\\certs\\\\pubserver.key')) federationKeyPassword = str('defaultpass') # location to backup client packages clientPackages = str(Path(fr'{MainPath}\\\\certs\\\\ClientPackages')) password = str('defaultpass') websocketkey = \"YourWebsocketKey\" When finished configuring MainConfig.py open the config.py file for editing MY PATH EXAMPLE C:\\Software\\python\\Lib\\site-packages\\FreeTAKServer-UI\\config.py Edited contents for windows machines: # -*- encoding: utf-8 -*- \"\"\" License: MIT Copyright (c) 2019 - present AppSeed.us \"\"\" import os from os import environ class Config(object): basedir = os.path.abspath(os.path.dirname(__file__)) SECRET_KEY = 'key' # This will connect to the FTS db SQLALCHEMY_DATABASE_URI = 'sqlite:///' + 'C:\\\\Software\\\\python\\\\Lib\\\\site-packages\\\\FreeTAKServer\\\\FTSDataBase.db' # certificates path certpath = \"C:\\\\Software\\\\python\\\\Lib\\\\site-packages\\\\FreeTAKServer\\\\certs\\\\\" # crt file path crtfilepath = f\"{certpath}pubserver.pem\" # key file path keyfilepath = f\"{certpath}pubserver.key.unencrypted\" # this IP will be used to connect with the FTS API IP = '127.0.0.1' # Port the UI uses to communicate with the API PORT = '19023' # the public IP your server is exposing APPIP = '127.0.0.1' # this port will be used to listen APPPort = 5000 # the webSocket key used by the UI to communicate with FTS. WEBSOCKETKEY = 'YourWebsocketKey' # the API key used by the UI to comunicate with FTS. generate a new system user and then set it APIKEY = 'Bearer token' # For 'in memory' database, please use: # SQLALCHEMY_DATABASE_URI = 'sqlite:///:memory:' SQLALCHEMY_TRACK_MODIFICATIONS = False # THEME SUPPORT # if set then url_for('static', filename='', theme='') # will add the theme name to the static URL: # /static/<DEFAULT_THEME>/filename # DEFAULT_THEME = \"themes/dark\" DEFAULT_THEME = None class ProductionConfig(Config): DEBUG = False # Security SESSION_COOKIE_HTTPONLY = True REMEMBER_COOKIE_HTTPONLY = True REMEMBER_COOKIE_DURATION = 3600 # PostgreSQL database SQLALCHEMY_DATABASE_URI = 'postgresql://{}:{}@{}:{}/{}'.format( environ.get('APPSEED_DATABASE_USER', 'appseed'), environ.get('APPSEED_DATABASE_PASSWORD', 'appseed'), environ.get('APPSEED_DATABASE_HOST', 'db'), environ.get('APPSEED_DATABASE_PORT', 5432), environ.get('APPSEED_DATABASE_NAME', 'appseed') ) class DebugConfig(Config): DEBUG = True config_dict = { 'Production': ProductionConfig, 'Debug': DebugConfig } In order to run the server and the GUI two terminal windows must be opened and the commands below must be run: SERVER START COMMAND > python -m FreeTAKServer.controllers.services.FTS UI START COMMAND > cd C:\\Software\\python\\Lib\\site-packages\\FreeTAKServer-UI > set FLASK_APP=run.py > flask run Now your server should be running. User = admin , Password = password and GUI link http://localhost:5000/ Notes If you would like to setup a Batch file (to run the server on a double click) use the commands below: Create a .bat file to run the server on double click and on startup: StartFreeTAKServer.bat ::START THE SERVER ECHO ON start cmd /k python -m FreeTAKServer.controllers.services.FTS cd C:\\Software\\python\\Lib\\site-packages\\FreeTAKServer-UI set FLASK_APP=run.py flask run pause Now to run at startup: Go to Run ( WINDOWS + R ) and Type shell:startup , and paste a copy of your StartFreeTAKServer.bat file there. To check python version python -V To quickely check your IP ipconfig TODO Create C# app to manage FreeTAKServer on windows with Python3 ##ERRORS COT error v1.5.13 More Info FreeTAKServer documentation for end users Description Link User Docs: https://freetakteam.github.io/FreeTAKServer-User-Docs/ PyPi Install Docs: https://freetakteam.github.io/FreeTAKServer-User-Docs/Installation/PyPi/Linux/Install/ Server Download: https://github.com/FreeTAKTeam/FreeTakServer Server Releases: https://github.com/FreeTAKTeam/FreeTakServer/releases RPiFTS Series GHOST_DA-B6 has created a set of videos on youtube detailing how to install and set up FTS on raspberry pi SBC's. You can view his RPiFTS video series on his channel .","title":"FreeTAKServer Install On Windows Computer"},{"location":"Installation/Windows/FreeTAKServer_Windows_Install/#freetakserver-install-on-windows-computer","text":"Below is the installation commands and comments for the installation of FreeTAKServer on a windows computer. Please notcie, the FTS team is not supporting Windows as an official OS for FTS. please contact the original authors","title":"FreeTAKServer Install On Windows Computer"},{"location":"Installation/Windows/FreeTAKServer_Windows_Install/#freetakserver-manager-for-windows","text":"FreeTAKServer Manager has the ability to Start, Stop, Restart, Install and Uninstall the FreeTAKServer & FreeTAKServer-UI.","title":"FreeTAKServer Manager For Windows"},{"location":"Installation/Windows/FreeTAKServer_Windows_Install/#release-version-1512","text":"FreeTAKServer provides Situational Awareness and other capabilities such as: sci-fi themed Web Administration SSL Encryption Management Health Monitor Dynamically change IP / ports, start, stop FTS services from web UI Service management Federation Service (Connecting two or more FTS or TAK server instances) Data Package upload and retrieval Private data package (user to user) Image transfer and storage COT recording in a database Execution of common task list (using the ExCheck plugin for WinTAK; ATAK plugin only available to users with takmaps.com access) User Management Command Line Interface REST API for creation of information such as emergency, Enemy units and so on the preferred way to install FTS is by using Pip, that would solve all the required dependencies. the offline release requires additional manual work and has to be used only in the cases where internet connection is not available.","title":"release version 1.5.12"},{"location":"Installation/Windows/FreeTAKServer_Windows_Install/#install-instructions","text":"Install python from python.org Download and run the installer https://www.python.org/downloads/windows/ Choose the installer option. Check pip, tcl/tk and IDLE and the Python test suite. Make sure you add Python to environment variables for easy use. Now check that python and pip are installed and working correctly. You should be able to open cmd anywhere and do this check : > python -V > pip --version Once you have checked that Python and pip are working install the requirements: > pip install flask > pip install flask_login > pip install flask_migrate > pip install flask_wtf > pip install flask_sqlalchemy > pip install email_validator > pip install gunicorn > pip install coveralls > pip install coverage > pip install pytest > pip install flake8 > pip install flake8-print > pip install pep8-naming > pip install selenium When all the requirements have been satisfied install the FreeTAKServer > python -m pip install FreeTAKServer[ui] After the installation has finished open the MainConfig.py file for editing. The contents must be changed fo that the Windows paths can communicate with FTS MY PATH EXAMPLE C:\\Software\\python\\Lib\\site-packages\\FreeTAKServer\\controllers\\configuration\\MainConfig.py Edited contents for windows machines: import os currentPath = os.path.dirname(os.path.abspath(__file__)) from pathlib import Path class MainConfig: \"\"\" this is the main configuration file and is the only one which should need to be changed \"\"\" # this is the port to which clients will connect CoTServicePort = int(8087) SSLCoTServicePort = int(8089) # this needs to be changed for private data packages to work DataPackageServiceDefaultIP = str(\"0.0.0.0\") # User Connection package IP needs to be set to the IP which is used when creating the connection in your tak device UserConnectionIP = str(\"0.0.0.0\") #python_version = 'python3.8' #userpath = '/usr/local/lib/' # api port APIPort = 19023 # Federation port FederationPort = 9000 # api IP APIIP = '0.0.0.0' # allowed ip's to access CLI commands AllowedCLIIPs = ['127.0.0.1'] # IP for CLI to access CLIIP = '127.0.0.1' # whether or not to save CoT's to the DB SaveCoTToDB = bool(True) # this should be set before startup DBFilePath = str(r'C:\\\\Software\\\\python\\\\Lib\\\\site-packages\\\\FreeTAKServer\\\\FTSDataBase.db') # the version information of the server (recommended to leave as default) version = 'FreeTAKServer-1.5.12 RC1' MainPath = str(Path(fr'C:\\\\Software\\\\python\\\\Lib\\\\site-packages\\\\FreeTAKServer')) ExCheckMainPath = str(Path(fr'{MainPath}\\\\ExCheck')) ExCheckFilePath = str(Path(fr'{MainPath}\\\\ExCheck\\\\template')) ExCheckChecklistFilePath = str(Path(fr'{MainPath}\\\\ExCheck\\\\checklist')) DataPackageFilePath = str(Path(fr'{MainPath}\\\\FreeTAKServerDataPackageFolder')) # format of API message header should be {Authentication: Bearer 'TOKEN'} from uuid import uuid4 id = str(uuid4()) nodeID = f\"FreeTAKServer-{id}\" # set to None if you don't want a message sent ConnectionMessage = f'Welcome to FreeTAKServer {version}. The Parrot is not dead. It\u2019s just resting' keyDir = str(Path(fr'{MainPath}\\\\certs\\\\pubserver.key')) pemDir = str(Path(fr'{MainPath}\\\\certs\\\\pubserver.pem')) # or crt unencryptedKey = str(Path(fr'{MainPath}\\\\certs\\\\pubserver.key.unencrypted')) p12Dir = str(Path(fr'{MainPath}\\\\certs\\\\pubserver.p12')) CA = str(Path(fr'{MainPath}\\\\certs\\\\ca.pem')) CAkey = str(Path(fr'{MainPath}\\\\certs\\\\ca.key')) federationCert = str(Path(fr'{MainPath}\\\\certs\\\\pubserver.pem')) federationKey = str(Path(fr'{MainPath}\\\\certs\\\\pubserver.key')) federationKeyPassword = str('defaultpass') # location to backup client packages clientPackages = str(Path(fr'{MainPath}\\\\certs\\\\ClientPackages')) password = str('defaultpass') websocketkey = \"YourWebsocketKey\" When finished configuring MainConfig.py open the config.py file for editing MY PATH EXAMPLE C:\\Software\\python\\Lib\\site-packages\\FreeTAKServer-UI\\config.py Edited contents for windows machines: # -*- encoding: utf-8 -*- \"\"\" License: MIT Copyright (c) 2019 - present AppSeed.us \"\"\" import os from os import environ class Config(object): basedir = os.path.abspath(os.path.dirname(__file__)) SECRET_KEY = 'key' # This will connect to the FTS db SQLALCHEMY_DATABASE_URI = 'sqlite:///' + 'C:\\\\Software\\\\python\\\\Lib\\\\site-packages\\\\FreeTAKServer\\\\FTSDataBase.db' # certificates path certpath = \"C:\\\\Software\\\\python\\\\Lib\\\\site-packages\\\\FreeTAKServer\\\\certs\\\\\" # crt file path crtfilepath = f\"{certpath}pubserver.pem\" # key file path keyfilepath = f\"{certpath}pubserver.key.unencrypted\" # this IP will be used to connect with the FTS API IP = '127.0.0.1' # Port the UI uses to communicate with the API PORT = '19023' # the public IP your server is exposing APPIP = '127.0.0.1' # this port will be used to listen APPPort = 5000 # the webSocket key used by the UI to communicate with FTS. WEBSOCKETKEY = 'YourWebsocketKey' # the API key used by the UI to comunicate with FTS. generate a new system user and then set it APIKEY = 'Bearer token' # For 'in memory' database, please use: # SQLALCHEMY_DATABASE_URI = 'sqlite:///:memory:' SQLALCHEMY_TRACK_MODIFICATIONS = False # THEME SUPPORT # if set then url_for('static', filename='', theme='') # will add the theme name to the static URL: # /static/<DEFAULT_THEME>/filename # DEFAULT_THEME = \"themes/dark\" DEFAULT_THEME = None class ProductionConfig(Config): DEBUG = False # Security SESSION_COOKIE_HTTPONLY = True REMEMBER_COOKIE_HTTPONLY = True REMEMBER_COOKIE_DURATION = 3600 # PostgreSQL database SQLALCHEMY_DATABASE_URI = 'postgresql://{}:{}@{}:{}/{}'.format( environ.get('APPSEED_DATABASE_USER', 'appseed'), environ.get('APPSEED_DATABASE_PASSWORD', 'appseed'), environ.get('APPSEED_DATABASE_HOST', 'db'), environ.get('APPSEED_DATABASE_PORT', 5432), environ.get('APPSEED_DATABASE_NAME', 'appseed') ) class DebugConfig(Config): DEBUG = True config_dict = { 'Production': ProductionConfig, 'Debug': DebugConfig } In order to run the server and the GUI two terminal windows must be opened and the commands below must be run: SERVER START COMMAND > python -m FreeTAKServer.controllers.services.FTS UI START COMMAND > cd C:\\Software\\python\\Lib\\site-packages\\FreeTAKServer-UI > set FLASK_APP=run.py > flask run Now your server should be running. User = admin , Password = password and GUI link http://localhost:5000/","title":"Install Instructions"},{"location":"Installation/Windows/FreeTAKServer_Windows_Install/#notes","text":"If you would like to setup a Batch file (to run the server on a double click) use the commands below: Create a .bat file to run the server on double click and on startup: StartFreeTAKServer.bat ::START THE SERVER ECHO ON start cmd /k python -m FreeTAKServer.controllers.services.FTS cd C:\\Software\\python\\Lib\\site-packages\\FreeTAKServer-UI set FLASK_APP=run.py flask run pause Now to run at startup: Go to Run ( WINDOWS + R ) and Type shell:startup , and paste a copy of your StartFreeTAKServer.bat file there. To check python version python -V To quickely check your IP ipconfig","title":"Notes"},{"location":"Installation/Windows/FreeTAKServer_Windows_Install/#todo","text":"Create C# app to manage FreeTAKServer on windows with Python3 ##ERRORS COT error v1.5.13","title":"TODO"},{"location":"Installation/Windows/FreeTAKServer_Windows_Install/#more-info","text":"FreeTAKServer documentation for end users Description Link User Docs: https://freetakteam.github.io/FreeTAKServer-User-Docs/ PyPi Install Docs: https://freetakteam.github.io/FreeTAKServer-User-Docs/Installation/PyPi/Linux/Install/ Server Download: https://github.com/FreeTAKTeam/FreeTakServer Server Releases: https://github.com/FreeTAKTeam/FreeTakServer/releases","title":"More Info"},{"location":"Installation/Windows/FreeTAKServer_Windows_Install/#rpifts-series","text":"GHOST_DA-B6 has created a set of videos on youtube detailing how to install and set up FTS on raspberry pi SBC's. You can view his RPiFTS video series on his channel .","title":"RPiFTS Series"},{"location":"Installation/Windows/FreeTAKServer_Windows_Install_Tutorial/","text":"FreeTAKServer Install On Windows Computer Below is the installation commands and comments for the installation of FreeTAKServer on a windows computer: Install Instructions (Tested on Server Version 1.7.5. and UI v1.5.10) Install python from python.org Download and run the installer. https://www.python.org/downloads/windows/ Choose the installer option. Check pip, tcl/tk and IDLE and the Python test suite. Make sure you add Python to environment variables for easy use. Now check that python and pip are installed and working correctly. You should be able to open cmd anywhere and do this check : > python -V > pip --version Once you have checked that Python and pip are working install the requirements: 3.1. Run install one by one. > pip install flask > pip install flask_login > pip install flask_migrate > pip install flask_wtf > pip install flask_sqlalchemy > pip install email_validator > pip install gunicorn > pip install coveralls > pip install coverage > pip install pytest > pip install flake8 > pip install flake8-print > pip install pep8-naming > pip install selenium 3.2. Run install from a file. From a file Paste these requirements into a .txt file requirements.txt for example: flask flask_login flask_migrate flask_wtf flask_sqlalchemy email_validator gunicorn coveralls coverage pytest flake8 flake8-print pep8-naming selenium now CD into the directory which containes said requirements.txt file and run the command below: pip install -r requirements.txt When all the requirements have been satisfied install the FreeTAKServer. > python -m pip install FreeTAKServer[ui] After the installation has finished open the MainConfig.py file for editing. The contents must be changed fo that the Windows paths can communicate with FTS. MY PATH EXAMPLE C:\\Software\\python\\Lib\\site-packages\\FreeTAKServer\\controllers\\configuration\\MainConfig.py Edited contents for windows machines: import os currentPath = os.path.dirname(os.path.abspath(__file__)) from pathlib import Path class MainConfig: \"\"\" this is the main configuration file and is the only one which should need to be changed \"\"\" # this is the port to which clients will connect CoTServicePort = int(os.environ.get('FTS_COT_PORT', 8087)) SSLCoTServicePort = int(os.environ.get('FTS_SSLCOT_PORT', 8089)) # this needs to be changed for private data packages to work DataPackageServiceDefaultIP = str(os.environ.get('FTS_DP_ADDRESS', \"0.0.0.0\")) # User Connection package IP needs to be set to the IP which is used when creating the connection in your tak device UserConnectionIP = str(os.environ.get('FTS_USER_ADDRESS', \"0.0.0.0\")) #Path to the site-packages dir in your python installation python_install_path = 'C:\\\\Software\\\\python\\\\Lib\\\\site-packages' # api port APIPort = os.environ.get('FTS_API_PORT', 19023) # Federation port FederationPort = os.environ.get('FTS_FED_PORT', 9000) # api IP APIIP = os.environ.get('FTS_API_ADDRESS', '0.0.0.0') # allowed ip's to access CLI commands AllowedCLIIPs = ['127.0.0.1'] # IP for CLI to access CLIIP = '127.0.0.1' # whether or not to save CoT's to the DB SaveCoTToDB = bool(os.environ.get('FTS_COT_TO_DB', True)) # this should be set before startup DBFilePath = str(os.environ.get('FTS_DATA_PATH', fr'{python_install_path}\\\\FreeTAKServer\\\\') + \"FTSDataBase.db\") # the version information of the server (recommended to leave as default) version = 'FreeTAKServer-1.7.5 Public' MainPath = str(os.environ.get('FTS_DATA_PATH', Path(fr'{python_install_path}\\\\FreeTAKServer'))) ExCheckMainPath = str(Path(fr'{MainPath}\\\\ExCheck')) ExCheckFilePath = str(Path(fr'{MainPath}\\\\ExCheck\\\\template')) ExCheckChecklistFilePath = str(Path(fr'{MainPath}\\\\ExCheck\\\\checklist')) DataPackageFilePath = str(Path(fr'{MainPath}\\\\FreeTAKServerDataPackageFolder')) # format of API message header should be {Authentication: Bearer 'TOKEN'} from uuid import uuid4 id = str(uuid4()) nodeID = os.environ.get('FTS_NODE_ID', f\"FreeTAKServer-{id}\") # set to None if you don't want a message sent ConnectionMessage = f'Welcome to FreeTAKServer {version}. The Parrot is not dead. It\u2019s just resting' certsPath = os.environ.get('FTS_CERTS_PATH', fr'{MainPath}/certs') keyDir = str(Path(fr'{certsPath}\\\\pubserver.key')) pemDir = str(Path(fr'{certsPath}\\\\pubserver.pem')) # or crt unencryptedKey = str(Path(fr'{certsPath}\\\\pubserver.key.unencrypted')) p12Dir = str(Path(fr'{certsPath}\\\\pubserver.p12')) CA = str(Path(fr'{certsPath}\\\\ca.pem')) CAkey = str(Path(fr'{certsPath}\\\\ca.key')) federationCert = str(Path(fr'{certsPath}\\\\pubserver.pem')) federationKey = str(Path(fr'{certsPath}\\\\pubserver.key')) federationKeyPassword = str(os.environ.get('FTS_FED_PASSWORD','defaultpass')) # location to backup client packages clientPackages = str(Path(fr'{MainPath}\\\\certs\\\\ClientPackages')) password = str(os.environ.get('FTS_PASSWORD', 'defaultpass')) websocketkey = os.environ.get('FTS_WEBSOCKET_KEY', \"YourWebsocketKey\") When finished configuring MainConfig.py open the config.py file for editing MY PATH EXAMPLE C:\\Software\\python\\Lib\\site-packages\\FreeTAKServer-UI\\config.py Edited contents for windows machines: # -*- encoding: utf-8 -*- \"\"\" License: MIT Copyright (c) 2019 - present AppSeed.us \"\"\" import os from os import environ class Config(object): basedir = os.path.abspath(os.path.dirname(__file__)) SECRET_KEY = 'key' # This will connect to the FTS db SQLALCHEMY_DATABASE_URI = 'sqlite:///' + 'C:\\\\Software\\\\python\\\\Lib\\\\site-packages\\\\FreeTAKServer\\\\FTSDataBase.db' # certificates path certpath = \"C:\\\\Software\\\\python\\\\Lib\\\\site-packages\\\\FreeTAKServer\\\\certs\\\\\" # crt file path crtfilepath = f\"{certpath}pubserver.pem\" # key file path keyfilepath = f\"{certpath}pubserver.key.unencrypted\" # this IP will be used to connect with the FTS API IP = '127.0.0.1' # Port the UI uses to communicate with the API PORT = '19023' # the public IP your server is exposing APPIP = '127.0.0.1' # this port will be used to listen APPPort = 5000 # the webSocket key used by the UI to communicate with FTS. WEBSOCKETKEY = 'YourWebsocketKey' # the API key used by the UI to comunicate with FTS. generate a new system user and then set it APIKEY = 'Bearer token' # For 'in memory' database, please use: # SQLALCHEMY_DATABASE_URI = 'sqlite:///:memory:' SQLALCHEMY_TRACK_MODIFICATIONS = False # THEME SUPPORT # if set then url_for('static', filename='', theme='') # will add the theme name to the static URL: # /static/<DEFAULT_THEME>/filename # DEFAULT_THEME = \"themes/dark\" DEFAULT_THEME = None class ProductionConfig(Config): DEBUG = False # Security SESSION_COOKIE_HTTPONLY = True REMEMBER_COOKIE_HTTPONLY = True REMEMBER_COOKIE_DURATION = 3600 # PostgreSQL database SQLALCHEMY_DATABASE_URI = 'postgresql://{}:{}@{}:{}/{}'.format( environ.get('APPSEED_DATABASE_USER', 'appseed'), environ.get('APPSEED_DATABASE_PASSWORD', 'appseed'), environ.get('APPSEED_DATABASE_HOST', 'db'), environ.get('APPSEED_DATABASE_PORT', 5432), environ.get('APPSEED_DATABASE_NAME', 'appseed') ) class DebugConfig(Config): DEBUG = True config_dict = { 'Production': ProductionConfig, 'Debug': DebugConfig } In order to run the server and the GUI two terminal windows must be opened and the commands below must be run: SERVER START COMMAND > python -m FreeTAKServer.controllers.services.FTS UI START COMMAND > cd C:\\Software\\python\\Lib\\site-packages\\FreeTAKServer-UI > set FLASK_APP=run.py > flask run Now your server should be running. User = admin , Password = password and GUI link http://localhost:5000/ To uninstall do: > pip uninstall FreeTAKServer > pip uninstall FreeTAKServer-UI Then in the C:\\Software\\python\\Lib\\site-packages\\FreeTAKServer\\ delete the FTSDataBase.db file. In the C:\\Software\\python\\Lib\\site-packages\\ path delete the FreeTAKServer & FreeTAKServer-UI folders. Notes If you would like to setup a Batch file (to run the server on a double click) use the commands below: Create a .bat file to run the server on double click and on startup: StartFreeTAKServer.bat ::START THE SERVER ECHO ON start cmd /k python -m FreeTAKServer.controllers.services.FTS ::WHEN RUNNING THE SCRIPT FROM A DIFFERENT DRIVE ADD THE `/D` SWITCH TO YOUR `CD` COMMAND CD /D C:\\Software\\python\\Lib\\site-packages\\FreeTAKServer-UI set FLASK_APP=run.py flask run pause Now to run at startup: Go to Run ( WINDOWS + R ) and Type shell:startup , and paste a copy of your StartFreeTAKServer.bat file there. To check python version python -V To quickely check your IP ipconfig","title":"FreeTAKServer Install On Windows Computer"},{"location":"Installation/Windows/FreeTAKServer_Windows_Install_Tutorial/#freetakserver-install-on-windows-computer","text":"Below is the installation commands and comments for the installation of FreeTAKServer on a windows computer:","title":"FreeTAKServer Install On Windows Computer"},{"location":"Installation/Windows/FreeTAKServer_Windows_Install_Tutorial/#install-instructions-tested-on-server-version-175-and-ui-v1510","text":"Install python from python.org Download and run the installer. https://www.python.org/downloads/windows/ Choose the installer option. Check pip, tcl/tk and IDLE and the Python test suite. Make sure you add Python to environment variables for easy use. Now check that python and pip are installed and working correctly. You should be able to open cmd anywhere and do this check : > python -V > pip --version Once you have checked that Python and pip are working install the requirements: 3.1. Run install one by one. > pip install flask > pip install flask_login > pip install flask_migrate > pip install flask_wtf > pip install flask_sqlalchemy > pip install email_validator > pip install gunicorn > pip install coveralls > pip install coverage > pip install pytest > pip install flake8 > pip install flake8-print > pip install pep8-naming > pip install selenium 3.2. Run install from a file. From a file Paste these requirements into a .txt file requirements.txt for example: flask flask_login flask_migrate flask_wtf flask_sqlalchemy email_validator gunicorn coveralls coverage pytest flake8 flake8-print pep8-naming selenium now CD into the directory which containes said requirements.txt file and run the command below: pip install -r requirements.txt When all the requirements have been satisfied install the FreeTAKServer. > python -m pip install FreeTAKServer[ui] After the installation has finished open the MainConfig.py file for editing. The contents must be changed fo that the Windows paths can communicate with FTS. MY PATH EXAMPLE C:\\Software\\python\\Lib\\site-packages\\FreeTAKServer\\controllers\\configuration\\MainConfig.py Edited contents for windows machines: import os currentPath = os.path.dirname(os.path.abspath(__file__)) from pathlib import Path class MainConfig: \"\"\" this is the main configuration file and is the only one which should need to be changed \"\"\" # this is the port to which clients will connect CoTServicePort = int(os.environ.get('FTS_COT_PORT', 8087)) SSLCoTServicePort = int(os.environ.get('FTS_SSLCOT_PORT', 8089)) # this needs to be changed for private data packages to work DataPackageServiceDefaultIP = str(os.environ.get('FTS_DP_ADDRESS', \"0.0.0.0\")) # User Connection package IP needs to be set to the IP which is used when creating the connection in your tak device UserConnectionIP = str(os.environ.get('FTS_USER_ADDRESS', \"0.0.0.0\")) #Path to the site-packages dir in your python installation python_install_path = 'C:\\\\Software\\\\python\\\\Lib\\\\site-packages' # api port APIPort = os.environ.get('FTS_API_PORT', 19023) # Federation port FederationPort = os.environ.get('FTS_FED_PORT', 9000) # api IP APIIP = os.environ.get('FTS_API_ADDRESS', '0.0.0.0') # allowed ip's to access CLI commands AllowedCLIIPs = ['127.0.0.1'] # IP for CLI to access CLIIP = '127.0.0.1' # whether or not to save CoT's to the DB SaveCoTToDB = bool(os.environ.get('FTS_COT_TO_DB', True)) # this should be set before startup DBFilePath = str(os.environ.get('FTS_DATA_PATH', fr'{python_install_path}\\\\FreeTAKServer\\\\') + \"FTSDataBase.db\") # the version information of the server (recommended to leave as default) version = 'FreeTAKServer-1.7.5 Public' MainPath = str(os.environ.get('FTS_DATA_PATH', Path(fr'{python_install_path}\\\\FreeTAKServer'))) ExCheckMainPath = str(Path(fr'{MainPath}\\\\ExCheck')) ExCheckFilePath = str(Path(fr'{MainPath}\\\\ExCheck\\\\template')) ExCheckChecklistFilePath = str(Path(fr'{MainPath}\\\\ExCheck\\\\checklist')) DataPackageFilePath = str(Path(fr'{MainPath}\\\\FreeTAKServerDataPackageFolder')) # format of API message header should be {Authentication: Bearer 'TOKEN'} from uuid import uuid4 id = str(uuid4()) nodeID = os.environ.get('FTS_NODE_ID', f\"FreeTAKServer-{id}\") # set to None if you don't want a message sent ConnectionMessage = f'Welcome to FreeTAKServer {version}. The Parrot is not dead. It\u2019s just resting' certsPath = os.environ.get('FTS_CERTS_PATH', fr'{MainPath}/certs') keyDir = str(Path(fr'{certsPath}\\\\pubserver.key')) pemDir = str(Path(fr'{certsPath}\\\\pubserver.pem')) # or crt unencryptedKey = str(Path(fr'{certsPath}\\\\pubserver.key.unencrypted')) p12Dir = str(Path(fr'{certsPath}\\\\pubserver.p12')) CA = str(Path(fr'{certsPath}\\\\ca.pem')) CAkey = str(Path(fr'{certsPath}\\\\ca.key')) federationCert = str(Path(fr'{certsPath}\\\\pubserver.pem')) federationKey = str(Path(fr'{certsPath}\\\\pubserver.key')) federationKeyPassword = str(os.environ.get('FTS_FED_PASSWORD','defaultpass')) # location to backup client packages clientPackages = str(Path(fr'{MainPath}\\\\certs\\\\ClientPackages')) password = str(os.environ.get('FTS_PASSWORD', 'defaultpass')) websocketkey = os.environ.get('FTS_WEBSOCKET_KEY', \"YourWebsocketKey\") When finished configuring MainConfig.py open the config.py file for editing MY PATH EXAMPLE C:\\Software\\python\\Lib\\site-packages\\FreeTAKServer-UI\\config.py Edited contents for windows machines: # -*- encoding: utf-8 -*- \"\"\" License: MIT Copyright (c) 2019 - present AppSeed.us \"\"\" import os from os import environ class Config(object): basedir = os.path.abspath(os.path.dirname(__file__)) SECRET_KEY = 'key' # This will connect to the FTS db SQLALCHEMY_DATABASE_URI = 'sqlite:///' + 'C:\\\\Software\\\\python\\\\Lib\\\\site-packages\\\\FreeTAKServer\\\\FTSDataBase.db' # certificates path certpath = \"C:\\\\Software\\\\python\\\\Lib\\\\site-packages\\\\FreeTAKServer\\\\certs\\\\\" # crt file path crtfilepath = f\"{certpath}pubserver.pem\" # key file path keyfilepath = f\"{certpath}pubserver.key.unencrypted\" # this IP will be used to connect with the FTS API IP = '127.0.0.1' # Port the UI uses to communicate with the API PORT = '19023' # the public IP your server is exposing APPIP = '127.0.0.1' # this port will be used to listen APPPort = 5000 # the webSocket key used by the UI to communicate with FTS. WEBSOCKETKEY = 'YourWebsocketKey' # the API key used by the UI to comunicate with FTS. generate a new system user and then set it APIKEY = 'Bearer token' # For 'in memory' database, please use: # SQLALCHEMY_DATABASE_URI = 'sqlite:///:memory:' SQLALCHEMY_TRACK_MODIFICATIONS = False # THEME SUPPORT # if set then url_for('static', filename='', theme='') # will add the theme name to the static URL: # /static/<DEFAULT_THEME>/filename # DEFAULT_THEME = \"themes/dark\" DEFAULT_THEME = None class ProductionConfig(Config): DEBUG = False # Security SESSION_COOKIE_HTTPONLY = True REMEMBER_COOKIE_HTTPONLY = True REMEMBER_COOKIE_DURATION = 3600 # PostgreSQL database SQLALCHEMY_DATABASE_URI = 'postgresql://{}:{}@{}:{}/{}'.format( environ.get('APPSEED_DATABASE_USER', 'appseed'), environ.get('APPSEED_DATABASE_PASSWORD', 'appseed'), environ.get('APPSEED_DATABASE_HOST', 'db'), environ.get('APPSEED_DATABASE_PORT', 5432), environ.get('APPSEED_DATABASE_NAME', 'appseed') ) class DebugConfig(Config): DEBUG = True config_dict = { 'Production': ProductionConfig, 'Debug': DebugConfig } In order to run the server and the GUI two terminal windows must be opened and the commands below must be run: SERVER START COMMAND > python -m FreeTAKServer.controllers.services.FTS UI START COMMAND > cd C:\\Software\\python\\Lib\\site-packages\\FreeTAKServer-UI > set FLASK_APP=run.py > flask run Now your server should be running. User = admin , Password = password and GUI link http://localhost:5000/ To uninstall do: > pip uninstall FreeTAKServer > pip uninstall FreeTAKServer-UI Then in the C:\\Software\\python\\Lib\\site-packages\\FreeTAKServer\\ delete the FTSDataBase.db file. In the C:\\Software\\python\\Lib\\site-packages\\ path delete the FreeTAKServer & FreeTAKServer-UI folders.","title":"Install Instructions (Tested on Server Version 1.7.5. and UI v1.5.10)"},{"location":"Installation/Windows/FreeTAKServer_Windows_Install_Tutorial/#notes","text":"If you would like to setup a Batch file (to run the server on a double click) use the commands below: Create a .bat file to run the server on double click and on startup: StartFreeTAKServer.bat ::START THE SERVER ECHO ON start cmd /k python -m FreeTAKServer.controllers.services.FTS ::WHEN RUNNING THE SCRIPT FROM A DIFFERENT DRIVE ADD THE `/D` SWITCH TO YOUR `CD` COMMAND CD /D C:\\Software\\python\\Lib\\site-packages\\FreeTAKServer-UI set FLASK_APP=run.py flask run pause Now to run at startup: Go to Run ( WINDOWS + R ) and Type shell:startup , and paste a copy of your StartFreeTAKServer.bat file there. To check python version python -V To quickely check your IP ipconfig","title":"Notes"},{"location":"Usage/Connecting%20ATAK/","text":"Connecting ATAK to Pub Server the FTS team supports a public instance of FTS with the last version installed so that you can test it. Configure ATAK for FreeTakServer on the Pub server In order to use ATAK with a FTS server you need to: 1. Download required files 2. Configure using import manager 1. Download required files The easiest way is to open this article in your Android phone, so that all the files will be already available there. Download and install ATAK 4.2 (updated Feb 24 2021) * Play store https://play.google.com/store/apps/details?id=com.atakmap.app.civ * Secondary https://files.civtak.org/ (use CivTAK Community OwnCloud Repo) * Alternative https://drive.google.com/file/d/1bbpvABH3zS1y-8iNbSlkmu4FgUocV0F0/view?usp=sharing Download the configuration fts-official-pub.zip at this link /docs/fts-official-pub.zip 2. Configure using import manager Start ATAK on android Tap the \u201c...\u201d Tap Import manager Tap \u201cLocal SD\u201d Go to the place where you have downloaded the files select fts-official-pub.zip Click OK A message will appear to inform you that you are are connected to Pub Server Under servers the Pub Server is \u2018green\u2019 (connected)","title":"Connecting ATAK to Pub Server"},{"location":"Usage/Connecting%20ATAK/#connecting-atak-to-pub-server","text":"the FTS team supports a public instance of FTS with the last version installed so that you can test it.","title":"Connecting ATAK to Pub Server"},{"location":"Usage/Connecting%20ATAK/#configure-atak-for-freetakserver-on-the-pub-server","text":"In order to use ATAK with a FTS server you need to: 1. Download required files 2. Configure using import manager","title":"Configure ATAK for FreeTakServer on the Pub server"},{"location":"Usage/Connecting%20ATAK/#1-download-required-files","text":"The easiest way is to open this article in your Android phone, so that all the files will be already available there. Download and install ATAK 4.2 (updated Feb 24 2021) * Play store https://play.google.com/store/apps/details?id=com.atakmap.app.civ * Secondary https://files.civtak.org/ (use CivTAK Community OwnCloud Repo) * Alternative https://drive.google.com/file/d/1bbpvABH3zS1y-8iNbSlkmu4FgUocV0F0/view?usp=sharing Download the configuration fts-official-pub.zip at this link /docs/fts-official-pub.zip","title":"1. Download required files"},{"location":"Usage/Connecting%20ATAK/#2-configure-using-import-manager","text":"Start ATAK on android Tap the \u201c...\u201d Tap Import manager Tap \u201cLocal SD\u201d Go to the place where you have downloaded the files select fts-official-pub.zip Click OK A message will appear to inform you that you are are connected to Pub Server Under servers the Pub Server is \u2018green\u2019 (connected)","title":"2. Configure using import manager"},{"location":"Usage/Connecting%20WinTAK/","text":"WinTAK has a known issue with the TAK Chat Plugin. You Must disable the plugin or you will have frequent disconnects from FTS. Disable TAK Chat Navigate to the plugin management menu. Then select unload on TAK Chat Connect to FTS You can now connect to FTS by navigating to Settings -> Network Preferences -> Mange Server Connections From there you can add your FTS server IP or host name and port.","title":"Connecting WinTAK"},{"location":"Usage/Connecting%20WinTAK/#disable-tak-chat","text":"Navigate to the plugin management menu. Then select unload on TAK Chat","title":"Disable TAK Chat"},{"location":"Usage/Connecting%20WinTAK/#connect-to-fts","text":"You can now connect to FTS by navigating to Settings -> Network Preferences -> Mange Server Connections From there you can add your FTS server IP or host name and port.","title":"Connect to FTS"},{"location":"Usage/ExCheck/","text":"ExCheck ExCheck is a plugin for ATAK and WinTAK. It allows users to collaborate on the execution and monitoring of tasks based on templates. To use ExCheck, you need to have a server that supports it. FTS supports the plugin since version 1.3. Version 1.5 supports also ExCheck in the WebUI Wintak in Wintak (since version 4.1) you can find the plugin as ExCheck under the plugin tab. On the top of the window you will see two buttons. a list of active checklists shows up below them. with the buttons You can: - create a new Template - create a new template based on an existing one - Join active checklist - Start a new checklist create a new Template You need to define a name , a description and at least a task, to be able to save the template. standard columns can be modified or deleted, - No: sequence of the task - Description: name of the task - Req. : this step is required to complete the checklist (???) - Callsign: TBD - Net: TBD - From: TBD - To: TBD - Codeword: a code word for this task - Due relative DTG: the timing of the completition of the task required field after that you have created a task you can righ click the hamburger menu (the 3 lines) to the left to: - Delete the task - add some background color - Toggle linebreak: allows to create a block of tasks create a new template based on an existing one Works like the previous, only you will start the template by modifying an existing one Start a new checklist When you start a new checklist, the current status is saved locally and on the server. Join active checklist Allow you to participate with others in completing the checklist. Working with checklists As soon a checklist is started, you can click on an action and set it to be completed. You can also set back to pending a completed item. It's also possible to add Notes (those are only visible opening the task item) If another team member changes the status of a task, you will get an update. to delete a checklist, you need to open it and pres the delete button ATAK the plugin for ATAK is yet not available to the community (Dec 2020). Functionalities are similar to the WinTAK version. Tests indicate that FTS has the same level of functional support","title":"ExCheck"},{"location":"Usage/ExCheck/#wintak","text":"in Wintak (since version 4.1) you can find the plugin as ExCheck under the plugin tab. On the top of the window you will see two buttons. a list of active checklists shows up below them. with the buttons You can: - create a new Template - create a new template based on an existing one - Join active checklist - Start a new checklist","title":"Wintak"},{"location":"Usage/ExCheck/#create-a-new-template","text":"You need to define a name , a description and at least a task, to be able to save the template. standard columns can be modified or deleted, - No: sequence of the task - Description: name of the task - Req. : this step is required to complete the checklist (???) - Callsign: TBD - Net: TBD - From: TBD - To: TBD - Codeword: a code word for this task - Due relative DTG: the timing of the completition of the task required field after that you have created a task you can righ click the hamburger menu (the 3 lines) to the left to: - Delete the task - add some background color - Toggle linebreak: allows to create a block of tasks","title":"create a new Template"},{"location":"Usage/ExCheck/#create-a-new-template-based-on-an-existing-one","text":"Works like the previous, only you will start the template by modifying an existing one","title":"create a new template based on an existing one"},{"location":"Usage/ExCheck/#start-a-new-checklist","text":"When you start a new checklist, the current status is saved locally and on the server.","title":"Start a new checklist"},{"location":"Usage/ExCheck/#join-active-checklist","text":"Allow you to participate with others in completing the checklist.","title":"Join active checklist"},{"location":"Usage/ExCheck/#working-with-checklists","text":"As soon a checklist is started, you can click on an action and set it to be completed. You can also set back to pending a completed item. It's also possible to add Notes (those are only visible opening the task item) If another team member changes the status of a task, you will get an update. to delete a checklist, you need to open it and pres the delete button","title":"Working with checklists"},{"location":"Usage/ExCheck/#atak","text":"the plugin for ATAK is yet not available to the community (Dec 2020). Functionalities are similar to the WinTAK version. Tests indicate that FTS has the same level of functional support","title":"ATAK"},{"location":"Usage/VideoManagement/","text":"Video Management Since version 1.9 FTS supports a complete video management function. you can: * Upload to FTS a video end point using the client (ATAK only) * Download an existing video endpoint from FTS * Additionally FTS will automatically send to all the connected clients video streams information coming from FreeTAK UAS or TAK ICU using the API","title":"Video Management"},{"location":"Usage/VideoManagement/#video-management","text":"Since version 1.9 FTS supports a complete video management function. you can: * Upload to FTS a video end point using the client (ATAK only) * Download an existing video endpoint from FTS * Additionally FTS will automatically send to all the connected clients video streams information coming from FreeTAK UAS or TAK ICU using the API","title":"Video Management"},{"location":"administration/CLI/","text":"CLI Availability the CLI has been sunset since version 1.5 of FTS, because of the new way to access the server. It may be reintroduced in the future. Access To access the CLI open a new terminal and run the command: sudo python3 -m FreeTAKServer.views.CLI Commands Command Purpose help List all commands start_all Begin all services type start_CoT_service Begin CoT service type start_data_package_service Begin data package service type stop_all Terminate all services type stop_CoT_service Terminate CoT service type stop_data_package_service Terminate data package service type change_connection_info Change the address and port of the server you're connecting to show_users Show connected user information type kill Kill the full server type show_DP Show all DataPackages on the server remove_DP Remove a DataPackages on the server add_api_user add a user and a token for API consumption show_api_users show a list of users and their tokens remove_api_user remove a user and a token for API consumption","title":"CLI"},{"location":"administration/CLI/#cli","text":"","title":"CLI"},{"location":"administration/CLI/#availability","text":"the CLI has been sunset since version 1.5 of FTS, because of the new way to access the server. It may be reintroduced in the future.","title":"Availability"},{"location":"administration/CLI/#access","text":"To access the CLI open a new terminal and run the command: sudo python3 -m FreeTAKServer.views.CLI","title":"Access"},{"location":"administration/CLI/#commands","text":"Command Purpose help List all commands start_all Begin all services type start_CoT_service Begin CoT service type start_data_package_service Begin data package service type stop_all Terminate all services type stop_CoT_service Terminate CoT service type stop_data_package_service Terminate data package service type change_connection_info Change the address and port of the server you're connecting to show_users Show connected user information type kill Kill the full server type show_DP Show all DataPackages on the server remove_DP Remove a DataPackages on the server add_api_user add a user and a token for API consumption show_api_users show a list of users and their tokens remove_api_user remove a user and a token for API consumption","title":"Commands"},{"location":"administration/SSL/","text":"SSL SSL is a protocol for secure comunication, FTS supports it since version 1.3. Activate your FTS's SSL service since version 1.5, FTS features a complete automation of SSL generation and deployment. This is easier, so consider using that approach. Please see the user manual here . Generate a SSL connection for your server this method requires understanding of complex console commands, we DO NOT provide support on issues with certs generations. We are currently exploring tools like YAOG (see https://github.com/patrickpr/YAOG) to simplify the process. those are the steps - a. generate the certificate authority - b. generate the server certificate - c. generate the client certificate - d. convert the client certificate into a .p12 format - e. create a Thruststore in p12 format generate the Certificate Authority (CA) you download and install openSSL Generate the CA key by typing the command openssl genrsa -out ca.key 1024 Generate the Certificate Signing Request (CSR) by typing the command: req -new -key ca.key -out ca.csr This command prompts you for the information to be contained in the certificate. The prompts should be answered as: Country Name (2 letter code) [AU]:CA State or Province Name (full name) [Some-State]:NS Locality Name (eg, city) []:Yarmouth Organization Name (eg, company) [Internet Widgits Pty Ltd]:FTS TEAM Organizational Unit Name (eg, section) []:Dev Common Name (e.g. server FQDN or YOUR name) []:FTS Server created ca.cfg (skip it) x509 -req -extfile ca.cfg -days 1825 -signkey ca.key -in ca.csr -out ca.crt Signature ok subject=C = CA, ST = NS, L = Yarmouth, O = FTS, OU = Dev, CN = Ghosty Getting Private key created server.cfg see https://gist.github.com/fntlnz/cf14feb5a46b2eda428e000157447309 generating server keys genrsa -out server.key 2048 Country Name (2 letter code) [AU]:CA State or Province Name (full name) [Some-State]:NS Locality Name (eg, city) []:Yarmouth Organization Name (eg, company) [Internet Widgits Pty Ltd]:FTS Organizational Unit Name (eg, section) []:Dev Common Name (e.g. server FQDN or YOUR name) []:192.168.2.75 openssl req -new -key server.key -out server.csr openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 1000 -sha256 Signature ok subject=C = CA, ST = NS, L = Yarmouth, O = FTS, OU = Dev, CN = 192.168.2.75 Getting CA Private Key save key decrypted 9. openssl rsa -in ssl.key.encrypted -out ssl.key.decrypted see https://stackoverflow.com/questions/6307886/how-to-create-pfx-file-from-certificate-and-private-key generating pfx/p12 openssl pkcs12 -export -out server.p12 -inkey server.key -in server.crt requires password generate client certs openssl genrsa -out testClient.key 2048 11. openssl req -new -key testClient.key -out testClient.csr - Country Name (2 letter code) [AU]:CA - State or Province Name (full name) [Some-State]:NS - Locality Name (eg, city) []:Yarmouth - Organization Name (eg, company) [Internet Widgits Pty Ltd]:FTS - Organizational Unit Name (eg, section) []:Dev - Common Name (e.g. server FQDN or YOUR name) []:testUser - A challenge password []:DoDoD openssl x509 -req -in testClient.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out testClient.crt -days 1000 -sha256 Signature ok subject=C = CA, ST = NS, L = Yarmouth, O = FTS, OU = Dev, CN = testUser Getting CA Private Key openssl pkcs12 -export -out testClient.p12 -inkey testClient.key -in testClient.crt requires pass see https://help.gamesalad.com/gamesalad-cookbook/publishing/4-android-publishing/4-02-creating-a-keystore/ generate keystore keytool.exe -genkey -v -keystore fts.keystore -alias fts -keyalg RSA -sigalg SHA1withRSA -keysize 2048 -validity 10000 Enter keystore password: Re-enter new password: What is your first and last name? Unknown : test client What is the name of your organizational unit? What is the name of your organization? What is the name of your City or Locality? What is the name of your State or Province? What is the two-letter country code for this unit? Is CN=test client, OU=Dev, O=FTS, L=Yarmouth, ST=NS, C=CA correct? Generating 2,048 bit RSA key pair and self-signed certificate (SHA1withRSA) with a validity of 10,000 days for: CN=test client, OU=Dev, O=FTS, L=Yarmouth, ST=NS, C=CA cert will be generated in the path where the command was run generate truststore keytool -import -file [PATH]\\server.crt -alias serverCert -keystore testTrustStore.p12 `keytool -import -file [PATH]\\testClient.crt -alias testClientCert -keystore testTrustStore.p12 Installing SSL on a client ATAK Tap settings Manage server connections open network connections Add a new connection assign a name and the IP of your server click on advanced options uncheck \"use default SSL/TLS certificates\" tap \"import Truststore\" select your truststore file type the password provide to you Tap \"Import client certificate\" select your client certificate type the password type \"OK\" WinTAK go to Settings -Network preferences Manage Server Connections Add Stream assign a Description, IP and port of your server select SSL as a protocol uncheck \"use default SSL/TLS certificates\" Click \"install Certificate Authority\" select your Certificate Authority file type the password provide to you click \"Install client certificate\" select your client certificate type the password click \"OK\"","title":"SSL"},{"location":"administration/SSL/#ssl","text":"SSL is a protocol for secure comunication, FTS supports it since version 1.3.","title":"SSL"},{"location":"administration/SSL/#activate-your-ftss-ssl-service","text":"since version 1.5, FTS features a complete automation of SSL generation and deployment. This is easier, so consider using that approach. Please see the user manual here .","title":"Activate your FTS's SSL service"},{"location":"administration/SSL/#generate-a-ssl-connection-for-your-server","text":"this method requires understanding of complex console commands, we DO NOT provide support on issues with certs generations. We are currently exploring tools like YAOG (see https://github.com/patrickpr/YAOG) to simplify the process. those are the steps - a. generate the certificate authority - b. generate the server certificate - c. generate the client certificate - d. convert the client certificate into a .p12 format - e. create a Thruststore in p12 format","title":"Generate a SSL connection for your server"},{"location":"administration/SSL/#generate-the-certificate-authority-ca","text":"you download and install openSSL Generate the CA key by typing the command openssl genrsa -out ca.key 1024 Generate the Certificate Signing Request (CSR) by typing the command: req -new -key ca.key -out ca.csr This command prompts you for the information to be contained in the certificate. The prompts should be answered as: Country Name (2 letter code) [AU]:CA State or Province Name (full name) [Some-State]:NS Locality Name (eg, city) []:Yarmouth Organization Name (eg, company) [Internet Widgits Pty Ltd]:FTS TEAM Organizational Unit Name (eg, section) []:Dev Common Name (e.g. server FQDN or YOUR name) []:FTS Server created ca.cfg (skip it) x509 -req -extfile ca.cfg -days 1825 -signkey ca.key -in ca.csr -out ca.crt Signature ok subject=C = CA, ST = NS, L = Yarmouth, O = FTS, OU = Dev, CN = Ghosty","title":"generate the Certificate Authority (CA)"},{"location":"administration/SSL/#getting-private-key","text":"created server.cfg see https://gist.github.com/fntlnz/cf14feb5a46b2eda428e000157447309 generating server keys genrsa -out server.key 2048 Country Name (2 letter code) [AU]:CA State or Province Name (full name) [Some-State]:NS Locality Name (eg, city) []:Yarmouth Organization Name (eg, company) [Internet Widgits Pty Ltd]:FTS Organizational Unit Name (eg, section) []:Dev Common Name (e.g. server FQDN or YOUR name) []:192.168.2.75 openssl req -new -key server.key -out server.csr openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 1000 -sha256 Signature ok subject=C = CA, ST = NS, L = Yarmouth, O = FTS, OU = Dev, CN = 192.168.2.75 Getting CA Private Key save key decrypted 9. openssl rsa -in ssl.key.encrypted -out ssl.key.decrypted see https://stackoverflow.com/questions/6307886/how-to-create-pfx-file-from-certificate-and-private-key generating pfx/p12 openssl pkcs12 -export -out server.p12 -inkey server.key -in server.crt requires password generate client certs openssl genrsa -out testClient.key 2048 11. openssl req -new -key testClient.key -out testClient.csr - Country Name (2 letter code) [AU]:CA - State or Province Name (full name) [Some-State]:NS - Locality Name (eg, city) []:Yarmouth - Organization Name (eg, company) [Internet Widgits Pty Ltd]:FTS - Organizational Unit Name (eg, section) []:Dev - Common Name (e.g. server FQDN or YOUR name) []:testUser - A challenge password []:DoDoD openssl x509 -req -in testClient.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out testClient.crt -days 1000 -sha256 Signature ok subject=C = CA, ST = NS, L = Yarmouth, O = FTS, OU = Dev, CN = testUser Getting CA Private Key openssl pkcs12 -export -out testClient.p12 -inkey testClient.key -in testClient.crt requires pass see https://help.gamesalad.com/gamesalad-cookbook/publishing/4-android-publishing/4-02-creating-a-keystore/","title":"Getting Private key"},{"location":"administration/SSL/#generate-keystore","text":"keytool.exe -genkey -v -keystore fts.keystore -alias fts -keyalg RSA -sigalg SHA1withRSA -keysize 2048 -validity 10000 Enter keystore password: Re-enter new password: What is your first and last name? Unknown : test client What is the name of your organizational unit? What is the name of your organization? What is the name of your City or Locality? What is the name of your State or Province? What is the two-letter country code for this unit? Is CN=test client, OU=Dev, O=FTS, L=Yarmouth, ST=NS, C=CA correct? Generating 2,048 bit RSA key pair and self-signed certificate (SHA1withRSA) with a validity of 10,000 days for: CN=test client, OU=Dev, O=FTS, L=Yarmouth, ST=NS, C=CA cert will be generated in the path where the command was run","title":"generate keystore"},{"location":"administration/SSL/#generate-truststore","text":"keytool -import -file [PATH]\\server.crt -alias serverCert -keystore testTrustStore.p12 `keytool -import -file [PATH]\\testClient.crt -alias testClientCert -keystore testTrustStore.p12","title":"generate truststore"},{"location":"administration/SSL/#installing-ssl-on-a-client","text":"","title":"Installing SSL on a client"},{"location":"administration/SSL/#atak","text":"Tap settings Manage server connections open network connections Add a new connection assign a name and the IP of your server click on advanced options uncheck \"use default SSL/TLS certificates\" tap \"import Truststore\" select your truststore file type the password provide to you Tap \"Import client certificate\" select your client certificate type the password type \"OK\"","title":"ATAK"},{"location":"administration/SSL/#wintak","text":"go to Settings -Network preferences Manage Server Connections Add Stream assign a Description, IP and port of your server","title":"WinTAK"},{"location":"administration/SSL/#select-ssl-as-a-protocol","text":"uncheck \"use default SSL/TLS certificates\" Click \"install Certificate Authority\" select your Certificate Authority file type the password provide to you click \"Install client certificate\" select your client certificate type the password click \"OK\"","title":"select SSL as a protocol"},{"location":"administration/Wed%20Admin/","text":"WebUI FTS has a web UI since version 1.5. Please download the web UI manual here","title":"WebUI"},{"location":"administration/Wed%20Admin/#webui","text":"FTS has a web UI since version 1.5. Please download the web UI manual here","title":"WebUI"},{"location":"tools/FreeTAKUAS/","text":"Introduction FreeTAK UAS (FTUAS) is an Android application that can: Control any DJI drone supported by the current DJI SDK Stream the position of the drone to all the connected TAK clients Stream the video Feed to all the connected TAK clients Create a \"target\" on the map and stream with all the connected TAK clients Requirements FreeTAK UAS app DJI compatible drone FTS v 1.9 (or better): the application will NOT support the legacy TAK server. the FTS REST API service must be activated You have a valid REST Token (created in the FTS UI under System User) FTH Video Service (or compatible RTMP server) if you want to stream live videos Installation Assuming that you have installed and configured your FTS and the video service , download the APK installation file on your phone / tablet and follow the instructions. if the installation is suvcessful you should have a new Icon Usage Connection start your drone start your controller connect the phone with FTUAS to the controller a popup will ask wich application you want to open select FTUAS and configure the following: FTS IP and Port Video Server IP and port the Drone name A series of messages will appear, indicating that the SDK is registred (requires an internet connection) and that the drone is ready Now click on UAS [READY] Interface the FTUAS interface is typical of DJI the following is special: As soon you switch to it the drone will start streaming the camera As soon you switch to it the drone will share his position with the FTS server, that will foward to all the connected clients the \"Red Dot\" in the middle can be tappped to create a geoObject of type \"Unknow\" call target and send to all the connected clients the vertical aim of the \"Red Dot\" can be changed by moving the gimbal in some model, it's also possible to aim the gimbal independent from the position of the drone by dragging the position on screen In the current version, the aim is not perfect so expect some delta ATAK Interface Map In ATAK the drone shows: a white zone (field of view) a Sensor Point of Interest (SPI) the position and name of the drone Menu to visualize the video tap the drone's icon and then the video icon Video Player In alternative open the ATAK video player and search for the name of your drone NOTICE: in the current version, every time a new video endpoint will be created, this must be manually deleted.","title":"FreeTAKUAS"},{"location":"tools/FreeTAKUAS/#introduction","text":"FreeTAK UAS (FTUAS) is an Android application that can: Control any DJI drone supported by the current DJI SDK Stream the position of the drone to all the connected TAK clients Stream the video Feed to all the connected TAK clients Create a \"target\" on the map and stream with all the connected TAK clients","title":"Introduction"},{"location":"tools/FreeTAKUAS/#requirements","text":"FreeTAK UAS app DJI compatible drone FTS v 1.9 (or better): the application will NOT support the legacy TAK server. the FTS REST API service must be activated You have a valid REST Token (created in the FTS UI under System User) FTH Video Service (or compatible RTMP server) if you want to stream live videos","title":"Requirements"},{"location":"tools/FreeTAKUAS/#installation","text":"Assuming that you have installed and configured your FTS and the video service , download the APK installation file on your phone / tablet and follow the instructions. if the installation is suvcessful you should have a new Icon","title":"Installation"},{"location":"tools/FreeTAKUAS/#usage","text":"","title":"Usage"},{"location":"tools/FreeTAKUAS/#connection","text":"start your drone start your controller connect the phone with FTUAS to the controller a popup will ask wich application you want to open select FTUAS and configure the following: FTS IP and Port Video Server IP and port the Drone name A series of messages will appear, indicating that the SDK is registred (requires an internet connection) and that the drone is ready Now click on UAS [READY]","title":"Connection"},{"location":"tools/FreeTAKUAS/#interface","text":"the FTUAS interface is typical of DJI the following is special: As soon you switch to it the drone will start streaming the camera As soon you switch to it the drone will share his position with the FTS server, that will foward to all the connected clients the \"Red Dot\" in the middle can be tappped to create a geoObject of type \"Unknow\" call target and send to all the connected clients the vertical aim of the \"Red Dot\" can be changed by moving the gimbal in some model, it's also possible to aim the gimbal independent from the position of the drone by dragging the position on screen In the current version, the aim is not perfect so expect some delta","title":"Interface"},{"location":"tools/FreeTAKUAS/#atak-interface","text":"","title":"ATAK Interface"},{"location":"tools/FreeTAKUAS/#map","text":"In ATAK the drone shows: a white zone (field of view) a Sensor Point of Interest (SPI) the position and name of the drone","title":"Map"},{"location":"tools/FreeTAKUAS/#menu","text":"to visualize the video tap the drone's icon and then the video icon","title":"Menu"},{"location":"tools/FreeTAKUAS/#video-player","text":"In alternative open the ATAK video player and search for the name of your drone NOTICE: in the current version, every time a new video endpoint will be created, this must be manually deleted.","title":"Video Player"}]}